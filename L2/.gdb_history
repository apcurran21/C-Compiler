s
n
n
n
n
n
n
b graph_coloring.cpp:133
run
continue
p node_stack
p node_stack[0]
p *node_stack[0]
p *node_stack[0].var
p *node_stack[1].var
p *node_stack[2].var
p *node_stack[3].var
n
n
n
p current_g_nodes 
n
n
n
n
n
run
continue
n
p node
p *node
p *node.var
n
p current_neighbors
p orig_g->graph[node]
p orig_g->graph[node].size()
g->getNodes().size()
p g->getNodes().size()
q
set args -g 0 -O0 -c
set args -g 0 -O0 -c test_out/testa.L2f 
source notes-debug/breakpoints.txt 
run
n
continue
p interference_graph
p *interference_graph
p *interference_graph.nodes 
p interference_graph.nodes 
p (interference_graph.nodes)
p *(interference_graph.nodes)
p (interference_graph.nodes).begin()
p interference_graph.nodes.begin()
s
n
s
n
n
n
n
node
p node
p *node
n
n
p node
p *node
n
n
p node
p *node
n
n
p *node
p *node.var
n
n
p *node.var
p *node
q
run
s
n
n
n
n
n
n
n
n
n
n
n
n
p interference_graph.graph 
p interference_graph.graph.find(var)
p *(interference_graph.graph).find(var)
p *(interference_graph.graph)
p (interference_graph.graph)
p (interference_graph.graph)[var]
var
p var
p interference_graph.graph
p node
p interference_graph.graph.find(node)
p interference_graph.graph
p interference_graph.graph.begin()
p interference_graph.graph.find(node)
p node
p *node
p interference_graph.nodes 
p interference_graph.nodes.begin()
p interference_graph.nodes.find(node)
p interference_graph.nodes
p node
p interference_graph.nodes.find(var)
p interference_graph.nodes.find(var).second()
p interference_graph.nodes.find(var).second
p *(interference_graph.nodes.find(var)).second
p *(interference_graph.nodes.find(var))
p *(interference_graph.nodes.find(var)).second()
p *(interference_graph.nodes.find(var)).second
p interference_graph.nodes.find(var)
p interference_graph.nodes.find(var)
p interference_graph.nodes
p var
p node
p interference_graph.nodes.find(var)->second
p *(interference_graph.nodes.find(var))->second
p interference_graph.nodes.find(var)
p interference_graph.nodes.find(var)->first
p (*interference_graph.nodes.find(var)).first
p (*interference_graph.nodes.find(var)).second
p *(*interference_graph.nodes.find(var)).second
n
b interference_graph.cx194
b interference_graph.c:194
b interference_graph.cpp:194
continue
p interference_graph
p *interference_graph
p interference_graph.nodes
p interference_graph.nodes.begin()
p interference_graph->nodes.begin()
p interference_graph->nodes->begin()
p interference_graph->nodes
p *(interference_graph->nodes)
p *(interference_graph->nodes)
p *interference_graph.nodes.begin()
b interference_graph.cpp:199
c
p interference_graph.nodes
p kill_set
show variables
show var
p in_out_sets
p in_out_sets.In_Set
p in_out_sets.In_Set.size()
p in_out_sets.In_Set[0]
p in_out_sets.In_Set[0].size()
p in_out_sets.Out_Set[0].size()
p in_out_sets.Out_Set[0][0]
p in_out_sets.Out_Set[0]
p in_out_sets.Out_Set[0].begin()
p in_out_sets.Out_Set[0]
p in_out_sets.Out_Set[0].find(0x4d1040)
p in_out_sets.Out_Set[0].find(0x4d1040)
n
p i
p *i
p gen_kill_set
p gen_kill_set.Gen_Set
p gen_kill_set.Gen_Set.size()
p gen_kill_set.Gen_Set[0]
p gen_kill_set.Gen_Set[0].size()
p gen_kill_set.Gen_Set[0][i]
p gen_kill_set.Kill_Set[0][i]
p gen_kill_set.Kill_Set[0][i].begin()
p *gen_kill_set.Kill_Set[0][i].begin()
p **gen_kill_set.Kill_Set[0][i].begin()
p *gen_kill_set.Kill_Set[0][i].begin()
set $varptr = *gen_kill_set.Kill_Set[0[i].begin()
set $varptr = *gen_kill_set.Kill_Set[0][i].begin()
set $vptr = *gen_kill_set.Kill_Set[0][i].begin()
p $vptr
p *$vptr
p interference_graph
p *interference_graph
p *interference_graph.nodes
p interference_graph.nodes
p $vptr
p interference_graph.nodes.find($vptr)
p interference_graph.nodes.begin()
p p
p p.functions 
p p.functions[0[
p p.functions[0]
p *p.functions[0]
p *p.functions[0]["%check"]
p p.functions[0]["%check"]
p *p.functions[0]
p *p.functions[0].variable_allocator
p p.functions[0].variable_allocator
p p.functions[0].variable_allocator.variable_database
p p.functions[0].variable_allocator.variable_database["%check"]
p p.functions[0].variable_allocator.variable_database.find("%check")
p p.functions[0].variable_allocator.variable_database
p p.functions[0].variable_allocator.variable_database.begin()
p p.functions[0].variable_allocator.variable_database.find("r12")
p p.functions[0].variable_allocator.variable_database.find("r12")
p p.functions[0].variable_allocator.variable_database.find("r12")->second
p p.functions[0].variable_allocator.variable_database.find('r12')
p "r12"
whatis "r12"
std::string vptr = "r12";
std::string vptr = "r12"
set std::string $vptr = "r12"
p p.functions[0].variable_allocator.variable_database.find(string("r12"))
p p.functions[0].variable_allocator.variable_database.find(std::string("r12"))
p p.functions[0].variable_allocator.variable_database.find(std::string("r12", 4))
p p.functions[0].variable_allocator.variable_database.find(string("r12", 4))
whatis "r12"
p p.functions[0].variable_allocator.variable_database.find(string("r12"))
whatis string("r12")
string("r12")
p string("r12")
p std::string("r12")
p p.functions[0].variable_allocator.variable_database
source notes-debug/map_access.py 
python 
map_val = gdb.parse_and_eval(p.functions[0].variable_allocator.variable_database)
map_val
print(map_val)
python
print("Hi")
q
set args -g 0 -O0 -c test_out/testa.L2f 
b src/compiler.cpp:161
run
p *interference_graph
p *interference_graph.nodes 
p *interference_graph[0]
p *interference_graph
p *interference_graph[0x4d444b0]
$p interference_graph
p interfernece_graph
dashboard -layout source varialbes
dashboard -layout source variables
p interference_graph
p *interference_graph
p *interference_graph->graph
p *interference_graph.graph
p interference_graph->graph
p interference_graph->graph.begin()
p interference_graph->graph[0x4d38a0]
p interference_graph->graph.find(0x4d3920)
