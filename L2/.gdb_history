p *fptr->instructions[0]
p *fptr->instructions[1]
p *fptr->instructions[2]
p *fptr->instructions[3]
p *fptr->instructions[4]
p *fptr->instructions[5]
p *fptr->instructions[6]
p *fptr->instructions[7]
p *fptr->instructions[8]
p *fptr->instructions[9]
p *fptr->instructions[10]
n
s
n
n
s
s
n
p var
n
p dynamic_cast<Variable*>(instructions->d)
p dynamic_cast<Variable*>(instruction->d)
p *dynamic_cast<Variable*>(instruction->d)
n
p instruction->defined
p instruction->defined[0]
p instruction->defined.begin()
p *instruction->defined.begin()
n
n
n
p instruction
p *instruction
p p
p function
s
p var
p *var
n
p var
n
p *dynamic_cast<Variable*>(instruction->d)
p instruction->defined
n
p instruction->defined
p instruction->defined.begin()
p *instruction->defined.begin()
p dynamic_cast<L2::Register*>(0x4b5090)
p dynamic_cast<L2::Register*>(*0x4b5090)
set L2::Variable* $ptr = 0x4b5090
set L2::Variable* $ptr = instruction->defined.begin()
set $ptr = instruction->defined.begin()
p $ptr
whatis $ptr
p dynamic_cast<L2::Register*>($ptr)
p &instruction->defined.begin()
p *&instruction->defined.begin()
p **&instruction->defined.begin()
p instruction->defined
p instruction->defined[0]
p instruction->defined.begin()
p *instruction->defined.begin()
p (*instruction->defined.begin())
p (*instruction->defined.begin())->value
p (*instruction->defined.begin())->name
p (*instruction->defined.begin())
n
n
dashboard -layout source variables stack breakpoints
b liveness_analysis.cpp:643
b L2.cpp:643
continue
n
p p
p fptr
p fptr->instructions
p fptr->instructions[0]
p *fptr->instructions[0]
p *fptr->instructions[1]
p fptr->instructions[1]->defined
p fptr->instructions[1]->defined.begin()
p *fptr->instructions[1]->defined.begin()
p *fptr->instructions[2]
p *fptr->instructions[2]
p *fptr->instructions[2].used
p fptr->instructions[2]->used
p fptr->instructions[2]->used[0]
p fptr->instructions[2]->used.begin()
p fptr->instructions[2]->used.begin()+8
p fptr->instructions[2]->used.second
p fptr->instructions[2]->used.second()
p fptr->instructions[2]->used.end()
p fptr->instructions[2]->used
p *std::next(mySet.begin(), 1)
p *std::next(fptr->instructions[2]->used..begin(), 1)
p *std::next(fptr->instructions[2]->used.begin(), 1)
p fptr->instructions[2]->used.begin()

p fptr->instructions[2]->used.begin()
p fptr->instructions[2]->used.find()
p fptr->instructions[2]->used.find(0x4b3b90)
p fptr->instructions[2]->used.end()
set $inst = *fptr->instructions[2]
p $inst
set $it = $inst.used.begin()
p $it
while $it != $inst.used.end()
p *$it
set $it = $it + 1
end
b L2.cpp:593
run
n
continue
p instruction
p *instruction
p *instruction.dst
p *instruction.s
p *instruction.M
q
break src/L2.cpp:377
run
p instruction_number
step
step
run
step
step
run
step
p label
p *label
p *label
p label
p label.label
p label->label
p label->getLabel()
*labelPtr = dynamic_cast<Label*>(label)
*dynamic_cast<Label*>(label)
dynamic_cast<Label*>(label)
label
p *dynamic_cast<Label*>(label)
dynamic_cast<Label*>(label)
p label
p *label
info breakpoints
run
p label_cast
p *label_Cast
p *label_cast
p instruction
p *instruction
p *label_cast
(gdb) watch -location label_Instruction_object->label
break src/L2.cpp:374
run
dashboard -layout source variables
next
info breakpoints
del 1
break src/L2.cpp:359
info breakpoints
run
continue
info breakpoints
del 2
break src/L2.cpp:360
run
continue
p instruction
p *instruction
p instruction._vptr.Instruction
continue
continue
next
next
p instruction
p *instruction
            auto label_cast = dynamic_cast<label_Instruction *>(instruction);
next
next
next
next
p label_cast
p *label_cast
info breakpoints
del 3
break src/parser.cpp:626
run
p in.string()
continue
run
step
step
step
step
step
step
step
step
next
next
next
next
p label
p *label
p *label.value
p label.value
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
info breakpoints
del 4
break src/liveness_analysis.cpp:135
run
continue
continue
continue
continue
p instruction_ptr
p *instruction_ptr
run
continue
continue
continue
p instruction_ptr
p *instruction_ptr
x/d 0x4643d0
x/g 0x4643d0
x/g 0x4643d0 + 8
quit
