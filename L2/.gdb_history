b L2.cpp:33
r
c
n
p seenVariables
n
n
n
n
pn
n
p uncolored_ndes
p uncolored_nodes
p color_result
n
p uncolored_nodes.size()
n
p interference_graph
p *interference_graph
p *interference_graph_copy
p interference_graph_copy->printGraph()
p interference_graph_copy->printNodeDegreees()
p interference_graph_copy->printNodeDegrees()
p interference_graph_copy->printColors()
p fptr
p *fptr
n
b L2.cpp:96
c
p fptr
p fptr_out
n
p fptr
p fptr_out
n
n
n
n
p fptr_out
p p_out
n
p p_out
n
n
n
s
info b
del 2
del 3
info b
p fptr
p *fptr
b L2.cpp:33
b L2.cpp:33
del 5
info b
dashboard -layot source stack breakpoints variables
dashboard -layout source stack breakpoints variables
n
n
n
p interference_graph->printGraph()
n
n
n
n
n
p uncolored_nodes
p uncolored_nodes[0]
p *uncolored_nodes[0]
p *uncolored_nodes[0].var
p interference_graph->nodes 
p interference_graph->nodes.begin()
p *interference_graph->nodes.begin()
p *interference_graph->nodes.begin().first
p *interference_graph->nodes.begin()->first
p interference_graph->printColors()
p interference_graph_copy->printColors()
p interference_graph_copy->nodes
p interference_graph_copy->printColors()
n
n
save breakpoints notes-debug/graph_color.txt 
info b
n
p node
p &node
p &uncolored_nodes[0]
p *&uncolored_nodes[0]
p *&node
info b
b L2.cpp:113
c
p fptr
p *fptr
n
n
n
p spilled_set
p spilled_set
p node->var
p *node->var
p newFunction
p *newFunction
n
n
n
b L2.cpp:123
c
n
p uncolored_nodes
n
n
p fptr
p *fptr
c
c
c
c
c
r
info b
c
p *fptr
c
p fptr
p *fptr
c
n
n
n
p spilled_ste
p spilled_set
p *fptr
p *new_funciton
p *newFunciton
p *newFunction
q
break src/L2.cpp:55
run
continue
dashboard -layout source variables
p fptr
p *fptr
info breakpoints
break del 1
del break 1
break src/L2.cpp:112
run
step
p f
p *f
node->var
p node->var
p node
p spilledVar
p *splledVar
p spilledVar->name
next
next
next
p newfunction
p newFunction
p *newFunction
next
p *newFunction
next
next
next
next
next
next
next
next
next
next
p *newFunction
next
info breakpoints
del break 2
break src/spill.cpp:37
run
continue
p i
continue
continue
continue
continue
continue
continue
p i
next
p instruction
p *instructio
p *instruction
next
next
next
next
next
p instruction2
p *instruction2
p visitor->replacementVariable
p visitor->replacementVariable->name
next
next
p newFunction
p *newFunction
nxt
next
p *newFunction
next
continue
continue
continue
next
next
next
next
next
next
p i
p *instruction
p f->instructions.size()
continue
next
next
next
next
next
p instruction
p *instruction
p i
run
p i
continue
continue
continue
continue
continue
continue
continue
continue
continue
continue
p i
next
p *instruction
next
step
step
next
next
next
p replaceD
quit
