b interference_graph.cpp:162
run
continue
n
n
n
n
n
n
p registers
n
n
p var
p *var
p registers 
n
p registers
p registers[0]
p registers.begin()
p *registers.begin()
p *registers.begin()->name
p *registers.begin().name
p *registers.begin()
p *(*registers.begin())
n
p node
p *node
p *node.var
n
p interference_graph
p *interference_graph
p *interference_graph.nodes.begin()
p *interference_graph.nodes
p *interference_graph->nodes
p interference_Graph
p interference_graph
p interference_graph->nodes
p interference_graph->nodes.begin()
p interference_graph->graph
p interference_graph->graph.begin()
p interference_graph->graph.begin().first
p interference_graph->graph.begin()[0]
p (interference_graph->graph.begin()).first()
p (*$18).first()
p (*$18)
p (interference_graph->graph.begin()).first()
p interference_graph->graph.begin()
p interference_graph->graph.begin().second
n
n
b interference_graph.cpp:194
continue
p graph
p interference_graph
p *interference_graph
p *interference_graph.nodes 
p interference_graph.nodes 
p interference_graph.nodes[var]
p interference_graph.graph 
n
n
n
continue
q
set args -g 0 -O0 -c test_out/testa.L2f 
b graph_coloring.cpp:42
run
n
p orig_graph 
p *orig_graph 
p *orig_graph.spilled_vars 
p orig_graph->spilled_vars 
p orig_graph->nodes
p orig_graph->nodes.begin()
p orig_graph->nodes->begin()
p orig_graph->nodes
p *orig_graph->nodes
p orig_graph->nodes.end()
p orig_graph->nodes.begin()
p orig_graph->nodes.end()
p orig_graph->nodes.end()->first
p orig_graph->nodes.end().first()
p orig_graph->nodes.end()->first()
p orig_graph->nodes.end()->first()
p orig_graph->nodes.end()
p orig_graph->nodes.end().first()
p *orig_graph->nodes.end()
p *orig_graph->nodes.end().first()
p *orig_graph->nodes.end().first
p *(*orig_graph->nodes.end())
p *(*orig_graph->nodes.end()).first
p *(*orig_graph->nodes.end()).second
p *(*orig_graph->nodes.begin()).second
q
set args -g 0 -O00 -c test_out/testa.L2f 
b graph_coloring.cpp:42
run
show args
n
*orig_graph.nodes
p *orig_graph.nodes
p orig_graph.nodes
p *orig_graph.nodes.begin()
p (*orig_graph.nodes).begin()
p (*orig_graph.nodes).end()
*(*orig_graph->nodes.end())
p *(*orig_graph->nodes.end())
p *orig_graph->nodes.end()
p *orig_graph->nodes.begin()
p orig_graph->nodes
p type(orig_graph->nodes)
p orig_graph->nodes
p 8orig_graph->nodes
p *orig_graph->nodes
p orig_graph->nodes.begin()
q
set args -g 0 -O0 -c test_out/testa.L2f 
b graph_coloring.cpp:42
run
set args -g 0 -c -O0 test_out/testa.L2f 
b graph_coloring.cpp:42
run
n
s
n
n
n
n
n
b graph_coloring.cpp:94
continue 
p small_degree_vec
print g
print *g
g->nodes
p g->nodes
p g->nodes.begin()
p small_degree_vec
p small_degree_vec[0]
p *small_degree_vec[0]
p *small_degree_vec[0]->var
p g->nodes[*small_degree_vec[0]->var]
p g->nodes.find(*small_degree_vec[0]->var)
g->nodes
p g->nodes
small_degree_vec[0]->var
p small_degree_vec[0]->var
g->nodes.find(small_degree_vec[0]->var)
p g->nodes.find(small_degree_vec[0]->var)
p g->nodes.find(small_degree_vec[0]->var).first
p g->nodes.find(small_degree_vec[0]->var).first()
p *(g->nodes.find(small_degree_vec[0]->var)).first()
p *(g->nodes.find(small_degree_vec[0]->var)).first
big_degree_vec
p big_degree_vec
p big_degree_vec[0]
p *big_degree_vec[0]
p *big_degree_vec[1]
b interference_graph.cpp:89
run
continue
n
g
p g
p graph
p graph->getNodes()
p graphgetNodes()
p graph.getNodes()
p graph
p this
p this->getNodes()
p this->getNodes()[0]
p *this->getNodes()[0]
b interference_graph.cpp:162
run
n
p interference_graph
p *interference_graph
n
n
n
f
p f
p *f
n
p registers
n
n
n
p var
p *var
p *f
n
p registers 
n
p node
p *node
p *node.var
n
p interference_graph
p *interference_graph
p node
p interference_graph->graph.find(node)
p interference_graph->graph
p node
p interference_graph->graph[node]
n
n
n
p var
p *var
n
p registers 
p registers.begin()
p *registers.begin()
p *(*registers.begin())
show b
show breakpoint
show breakpoints
breakpoints
info b
q
qy
q
set args -g 0 -O0 -c test_out/testa.L2f 
b graph_coloring.cpp:42
run
n
p *orig_graph 
p *orig_graph.nodes
p orig_graph.nodes
p orig_graph->nodes
p orig_graph->nodes
p orig_graph->nodes.begin(_
p orig_graph->nodes.begin()
p orig_graph->nodes.find(0x4cbd40)
p dynamic_cast<Variable*>(0x4cbd40)
p orig_graph->nodes
p graph->nodes
n
run
n
s
n
n
n
n
p node
p *node
p *node
p *node->var
var
node
node->var
p node
p *node
