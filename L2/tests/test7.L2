(@go
  (@go
0

    // Allocate the data
    rdi <- 5
    rsi <- 5
    call allocate 2
    %array1 <- rax

    // Print the %array
    rdi <- %array1
    call print 1

    // Check the %array
    rdi <- %array1
    mem rsp -8 <- :checkArray_ret
    call @checkArray 1
    :checkArray_ret
    %isAnArray <- rax

    rdi <- %isAnArray
    mem rsp -8 <- :printValue_ret
    call @printValue 1
    :printValue_ret

    // Check an integer
    rdi <- 5
    mem rsp -8 <- :checkArray_ret2
    call @checkArray 1
    :checkArray_ret2
    %isAnArray <- rax

    rdi <- %isAnArray
    mem rsp -8 <- :printValue_ret2
    call @printValue 1
    :printValue_ret2

    return
  )

  (@checkArray
1

    // Initialization of variables
    %array <- rdi

    // Check if the %array is an actual %array
    %tempArrayPointer <- %array
    %tempArrayPointer &= 1
    cjump %tempArrayPointer = 0 :isAnArray 
goto :isAnInt


    :isAnInt
    rax <- 0
    return

    :isAnArray
    rax <- 1
    return
  )

  (@printValue
1

    // Initialization of variables
    %intToPrint <- rdi

    // Encode the integer
    %intToPrint <<= 1
    %intToPrint++

    // Print
    rdi <- %intToPrint
    call print 1

    return
  )
)
