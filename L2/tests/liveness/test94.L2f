(@fibonacci
	1
	cjump rdi = 0 :zero
	goto :general
	:zero
	rax <- 0
	return
	:one
	rdi <- %original_arr_ptr
	call print 1
	rax <- 1
	return
	:general
	%n <- rdi
	%n += 1
	rdi <- %n
	rdi <<= 1
	rdi++
	rsi <- 1
	call allocate 2
	mem rax 16 <- 3
	%original_arr_ptr <- rax
	%i_offset <- 24
	%arr_len <- %n
	%arr_len <<= 3
	%arr_len += 8
	cjump %n = 2 :one
	goto :loop
	:loop
	%arr_ptr <- %original_arr_ptr
	%arr_ptr += %i_offset
	%prev_value <- mem %arr_ptr -8
	%prev_value--
	%prev_value >>= 1
	%prev_prev_value <- mem %arr_ptr -16
	%prev_prev_value--
	%prev_prev_value >>= 1
	%prev_value += %prev_prev_value
	%prev_value <<= 1
	%prev_value++
	mem %arr_ptr 0 <- %prev_value
	%i_offset += 8
	cjump %i_offset < %arr_len :loop
	goto :after
	:after
	rdi <- %original_arr_ptr
	call print 1
	rax <- mem %arr_ptr 0
	rax--
	rax >>= 1
	return
)
