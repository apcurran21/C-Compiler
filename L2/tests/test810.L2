// fibonacci
// iterative approach
(@go
    (@go
        0
        mem rsp -8 <- :goCallsFibonacciReturn
        // compute fibonacci 20th term
        rdi <- 20
        call @fibonacci 1
        :goCallsFibonacciReturn
        rdi <- rax
        rdi <<= 1
        // encode return value
        rdi += 1
        // and print, should be 6765
        call print 1
        return
    )
    // def fibonacci(n: int) -> int
      (@fibonacci
        1
        // if n == 1: return 1
        cjump rdi = 1 :fibonacciInitialCondition
        // if n == 2: return 1
        cjump rdi = 2 :fibonacciInitialCondition
        // else
        // a = 1
        %a <- 1
        // b = 1
        %b <- 1

        // i = 3
        %i <- 3
        // for i in range(3, 21)
        :fibonacciFor
            // if i < 21
            cjump %i <= rdi :fibonacciForIntoLoop
            rax <- %res
            // if i >= 21: return res
            return

            :fibonacciForIntoLoop
            %res <- %a
            // res = a + b
            %res += %b
            // a = b
            %a <- %b
            // b = res
            %b <- %res

            %i ++
            cjump 1 = 1 :fibonacciFor

        :fibonacciInitialCondition
        // return 1
        rax <- 1
        return
    )
)
