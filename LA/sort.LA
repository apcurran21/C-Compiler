void @main(){
    :entry
    int64[] %arr
    int64[] %ans 
    arr <- @read_input_arr()
    ans <- @sort_arr(arr)
    @print_arr(ans)
    return 
}

void @swap(int64 index_1,int64 index_2,int64[] %arr){
    int64 %temp
    temp <- %arr[index_1]
    %arr[index_1] <- %arr[index_2]
    %arr[index_2] <- %arr[index_1]
    return
}

void @sort_arr(int64[] %arr){
    int64 %length
    int64 %i_le_0
    int64 %i 
    int64 %j
    int64 %j_ge_i
    %length <- length %arr 0 
    %i <- %length - 1 
    :FORL_OUTER
    %j <- 0
    %i_le_0 <- %i <= 0
    br %i_le_0 :FORL_INNER :ENDL_OUTER
        :FORL_INNER
        %j_ge_i <- %j >= %i
        br %j_ge_i :ENDL_INNER
            %j_val <- %arr[%j]
            %j_plus1_val <- %arr[%j+1]
            // only swap if j is smaller than j+1
            %j_ge_j_plus1 <- %j_val >= %j_plus1_val
            br %j_ge_j_plus1 :SKIP
                call @swap(%j_element_ptr, %j_plus1_element_ptr,%arr)
            :SKIP

            // update inner index and element pointers
            %j <- %j + 1
            %j_element_ptr <- %j_element_ptr + 1 
            %j_plus1_element_ptr <- %j_plus1_element_ptr + 1
            br :FORL_INNER
        :ENDL_INNER
        %i <- %i - 1 
        br :FORL_OUTER
    :ENDL_OUTER
    return
}

int64[] @read_input_arr(){
    int64 %user_arr_len
    int64[] %user_arr
    int64 %index
    int64 %user_val
    %user_arr_len <- call input()
    %user_arr <- call allocate(%user_arr_len, 1)
    %index <- 0
    :FORL 
    %i_geq_len <- %index >= %arr_len
    br %i_geq_len :ENDL 
        %user_val <- call input()
        %user_arr[%index] <- %user_val
        %index <- %index + 1
        br :FORL
    :ENDL
    return %user_arr
}

void @print_arr(%arr){
    int64 %arr_len
    int64 %index
    int64 %curr_elemnt
    %arr_len <- length %arr 0
    %index <- 0
    :FORL
    %i_geq_len <- %index >= %arr_len
    br :%i_geq_len :ENDL
        %curr_element <- %arr[%index]
        call print(%curr_element)
        %index <- %index + 1
        br :FORL
    :ENDL 
    return

}
