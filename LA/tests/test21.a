void main (){

  int64[][][] A
  int64 test

  // create test values
  int64 test1
  int64 test2
  int64 test3
  int64 test4
  int64 test5
  int64 test6

  test1 <- 1
  test2 <- 2
  test3 <- 3
  test4 <- 4
  test5 <- 5
  test6 <- 6

  // initialize 3D array
  // 5 x 4 x 3
  A <- new Array(5, 4, 3)
  A[1][0][1] <- test1
  A[3][0][2] <- test2
  A[0][1][0] <- test3
  A[0][2][2] <- test4
  A[1][3][1] <- test5
  A[4][1][0] <- test6

  // test program
  test <-  findArrayValue(A, test1)
   // print 1
   print(test)
  test <-  findArrayValue(A, test2)
   // print 1
   print(test)
  test <-  findArrayValue(A, 8)
   // print 0
   print(test)
  test <-  findArrayValue(A, test3)
   // print 1
   print(test)
  test <-  findArrayValue(A, test4)
   // print 1
   print(test)
  test <-  findArrayValue(A, test5)
   // print 1
   print(test)
  test <-  findArrayValue(A, 9)
   // print 0
   print(test)
  test <-  findArrayValue(A, 12)
   // print 0
   print(test)
  test <-  findArrayValue(A, test6)
   // print 1
   print(test)
  return
}

int64 findArrayValue (int64[][][] A, int64 v){

  // get length of all 3 dimensions of array
  int64 first_dimension_length
  int64 second_dimension_length
  int64 third_dimension_length

  first_dimension_length <- length A 0
  second_dimension_length <- length A 1
  third_dimension_length <- length A 2

  // iterate through first dimension
  // for (int i =0; i < first_dimension_length; i++)

  // initalize index for first loop
  int64 i
  i <- 0

  :check_loop_1
  int64 check_loop_1
  check_loop_1 <- i < first_dimension_length
  br check_loop_1 :loop_1_body :exit_loop1

  :loop_1_body

  // iterate through second dimension
  // for (int j = 0; j < second_dimension_length; j++)

  int64 j
  j <- 0
  br :check_loop_2

  :check_loop_2
  int64 check_loop_2
  check_loop_2 <- j < second_dimension_length
  br check_loop_2 :loop_2_body :exit_loop2

  :loop_2_body

  // iterate through third dimension
  // for (int k = 0; k < third_dimension_length; k++)

  int64 k
  k <- 0
  br :check_loop_3

  :check_loop_3
  int64 check_loop_3
  check_loop_3 <- k < third_dimension_length
  br check_loop_3 :loop_3_body :exit_loop3

  // if(A[i][j][k] == v)
  :loop_3_body
  int64 current_value
  current_value <- A[i][j][k]

  int64 check_value_equality
  check_value_equality <- current_value = v
  br check_value_equality :return_true :continue

  :continue
  k <- k + 1
  br :check_loop_3

  :exit_loop3
  j <- j + 1
  br :check_loop_2

  :exit_loop2
  i <- i + 1
  br :check_loop_1

  // value not found
  :exit_loop1
  return 0

  // value found
  :return_true
  return 1
}
