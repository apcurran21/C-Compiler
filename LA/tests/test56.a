void main ( ){
	int64[][][] a
	int64 v1
	int64 v3
	int64 v5
	int64 v7
	int64 v11
	int64 v13
	int64 v15
	int64 v17

	v1 <- 1
	v3 <- 3
	v5 <- 5
	v7 <- 7
	v11 <- 11
	v13 <- 13
	v15 <- 15
	v17 <- 17

	// create and populate the array
	a <- new Array(2,3,4)
	a[0][0][0] <- v1
	a[0][1][0] <- v3
	a[1][2][2] <- v5
	a[1][0][3] <- v7
	a[1][1][0] <- v11
	a[1][1][0] <- v13
	a[0][0][1] <- v15
	a[1][2][3] <- v17

    // Check values that exist in array
	 printExistance(a, v1)
	 printExistance(a, v3)
	 printExistance(a, v5)
	 printExistance(a, v7)
	 printExistance(a, v13)
	 printExistance(a, v15)
	 printExistance(a, v17)

	// Check values do not exist 
	 printExistance(a, v11)
	 printExistance(a, 9)
	 printExistance(a, 19)
	 printExistance(a, 21)

	return
}

void printExistance (int64[][][] A, int64 v){
	int64 found
	found <-  isValueInArray(A, v)
	 print(found)
	return
}

int64 isValueInArray (int64[][][] A, int64 v){
	int64 l
	int64 m
	int64 n
	int64 found

	found <- 0
	l <- length A 0
	m <- length A 1
	n <- length A 2

	// outer loop initialization
	int64 i
	i <- 0

	:outer_loop_check
	int64 checkouter
	checkouter <- i < l
	br checkouter :middle_loop :done

	:middle_loop
	int64 j
	j <- 0
	br :middle_loop_check

	:middle_loop_check
	int64 checkmiddle
	checkmiddle <- j < m
	br checkmiddle :inner_loop :outer_loop_body

	:inner_loop
	int64 k
	k <- 0
	br :inner_loop_check

	:inner_loop_check
	int64 checkinner
	checkinner <- k < n
	br checkinner :inner_loop_body :middle_loop_body

	:inner_loop_body
	int64 value
	int64 isequal
	value <- A[i][j][k]
	isequal <- value = v
	br isequal :found :body

	:body
	k <- k + 1
	br :inner_loop_check

	:middle_loop_body
	j <- j + 1
	br :middle_loop_check

	:outer_loop_body
	i <- i + 1
	br :outer_loop_check

	:found
	found <- 1

	:done
	return found		
}
