tuple vec_ctor() {
    tuple res
    int64[][] buf
    res <- new Tuple(3)
    res[0] <- 0
    res[1] <- 1
    buf <- new Array(2,2)
    res[2] <- buf
    return res
}

void memcp32(int64[][][] ptr, int64 idx, int64[][] buf) {
    int64 n
    n <- ptr[idx][0][0]
    buf[0][0] <- n
    n <- ptr[idx][0][1]
    buf[0][1] <- n
    n <- ptr[idx][1][0]
    buf[1][0] <- n
    n <- ptr[idx][1][1]
    buf[1][1] <- n
    return
}

void memcp23(int64[][] buf, int64[][][] qtr, int64 idx) {
    int64 n
    n <- buf[0][0]
    qtr[idx][0][0] <- n
    n <- buf[0][1]
    qtr[idx][0][1] <- n
    n <- buf[1][0]
    qtr[idx][1][0] <- n
    n <- buf[1][1]
    qtr[idx][1][1] <- n
    return
}

void vec_do_push_back(tuple vec, int64[][] new_val) {
    int64[][][] ptr
    int64 size
    int64 new_size
    size <- vec[0]
    ptr <- vec[1]
    memcp23(new_val, ptr, size)
    new_size <- size + 1
    vec[0] <- new_size
    return
}

void vec_push_back_alloc(tuple vec) {
    int64[][][] ptr
    int64 is_empty
    ptr <- vec[1]
    is_empty <- ptr & 1
    br is_empty :alloc_new :check_length
:check_length
    int64 size
    int64 capacity
    int64 len
    int64 is_full
    size <- vec[0]
    capacity <- length ptr 0
    is_full <- size = capacity
    br is_full :extend :has_space_left
:has_space_left
    return
:extend
    int64[][][] qtr
    int64 tiida
    tiida <- capacity * 2
    qtr <- new Array(tiida, 2, 2)

    int64 i
    int64 N
    i <- 0
:copy
    int64 icmp
    icmp <- i < capacity
    br icmp :do :finish
:do
    int64[][] buf
    buf <- vec[2]
    memcp32(ptr, i, buf)
    memcp23(buf, qtr, i)
:inc
    i <- i + 1
    br :copy
:finish
    vec[1] <- qtr
    return
:alloc_new
    int64[][][] arr
    arr <- new Array(1,2,2)
    vec[1] <- arr
    return
}

void main() {
    int64 i
    int64 N
    int64[][] mat
    tuple vec
    int64 j
    tuple printing_buf
    printing_buf <- new Tuple(2)
    vec <- vec_ctor()
    i <- 0
    j <- 0
    N <- 300000000
    mat <- new Array(2, 2)
    initmat(mat)
:B2
    int64 icmp
    i <- 1 + i
    icmp <-i> N
    icmp <- 1 - icmp
    br icmp :B3 :B6
:B3
    int64 resid
    int64 notresid
    icmp <- i <= 10
    br icmp :B5 :B3_5
:B3_5
    j <- i - 1
    resid <- j & 33554431
    notresid <- 1 - resid
    br notresid :B5 :B4
:B4
    nextfib(mat)
    resid <- j & 2097151
    icmp <- resid = 0
    br icmp :save :B2
:save
    vec_push_back_alloc(vec)
    vec_do_push_back(vec, mat)
    int64 size
    int64 capacity
    int64[][][] ptr
    size <- vec[0]
    printing_buf[0] <- size
    ptr <- vec[1]
    capacity <- length ptr 0
    printing_buf[1] <- capacity
    print(printing_buf)
    br :B2
:B5
    print(i)
    print(mat)
    br :B4
:B6
    int64[][][] data
    data <- vec[1]
    print(data)
    return
}

// compute fib by
//   [0 1] n
//   [1 1]
void initmat(int64[][] mat) {
    mat[0][0] <- 0
    mat[0][1] <- 1
    mat[1][0] <- 1
    mat[1][1] <- 1
    return
}

int64 mod10000(int64 n) {
    int64 icmp
    icmp <- n >= 10000
    br icmp :mod :nothing
:nothing
    return n
:mod
    n <- n - 10000
    n <- mod10000(n)
    return n
}

void nextfib(int64[][] acc) {
    int64 n00
    int64 n01
    int64 n10
    int64 n11
    br :B1
:B2
    int64 B00
    int64 B01
    int64 B10
    int64 B11
    B00 <- 0
    B01 <- 1
    B10 <- 1
    B11 <- 1
    br :B3
:B1
    int64 A00
    int64 A01
    int64 A10
    int64 A11
    A00 <- acc[0][0]
    A01 <- acc[0][1]
    A10 <- acc[1][0]
    A11 <- acc[1][1]
    br :B2
:Bend
    n00 <- mod10000(n00)
    n01 <- mod10000(n10)
    n10 <- mod10000(n10)
    n11 <- mod10000(n11)
    acc[0][0] <- n00
    acc[0][1] <- n01
    acc[1][0] <- n10
    acc[1][1] <- n11
    return
:B3
    int64 a
    int64 b
    a <- A00 * B00
    b <- A01 * B10
    int64 c
    int64 d
    c <- A00 * B01
    d <- A01 * B11
    int64 e
    int64 f
    e <- A10 * B00
    f <- A11 * B10
    int64 g
    int64 h
    g <- A10 * B01
    h <- A11 * B11
    n00 <- a + b
    n01 <- c + d
    n10 <- e + f
    n11 <- g + h
    br :Bend
}
