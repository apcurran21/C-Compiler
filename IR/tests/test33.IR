define void @main() {
    :entry
    int64 %size
    // 10 << 1 + 1
    %size <- 21
    int64[] %v1
    int64[] %v2
    int64 %res
    %v1 <- new Array(%size)
    %v2 <- new Array(%size)
    %v1[0] <- 1
    %v2[0] <- 2
    %v1[1] <- 3
    %v2[1] <- 4
    %v1[2] <- 5
    %v2[2] <- 6
    %v1[3] <- 7
    %v2[3] <- 8
    %v1[4] <- 9
    %v2[4] <- 10
    %v1[5] <- 11
    %v2[5] <- 12
    %v1[6] <- 13
    %v2[6] <- 14
    %v1[7] <- 15
    %v2[7] <- 16
    %v1[8] <- 17
    %v2[8] <- 18
    %v1[9] <- 19
    %v2[9] <- 20
    %res <- call @dot_product(%v1, %v2, %size)
    %res <- %res << 1
    %res <- %res + 1
    call print(%res)
    return
}

define int64 @dot_product(int64[] %v1, int64[] %v2, int64 %n) {
    :entry
    int64 %n_decoded
    %n_decoded <- %n >> 1
    int64 %prod
    %prod <- 0
    int64 %idx
    int64 %loop_cond
    int64 %tmp1
    int64 %tmp2
    int64 %tmp3

    %idx <- 0
    br :loop_start

    :loop_start
    %loop_cond <- %idx < %n_decoded
    br %loop_cond :loop_body :loop_end

    :loop_body
    %tmp1 <- %v1[%idx]
    %tmp2 <- %v2[%idx]
    %tmp3 <- %tmp1 * %tmp2
    %prod <- %prod + %tmp3
    %idx <- %idx + 1
    br :loop_start

    :loop_end
    return %prod
}
