// fibonacci
// iterative approach

define void @main() {
    :entry
    int64 %res
    %res <- call @fibonacci(20)
    %res <- %res << 1
    %res <- %res + 1
    call print(%res)
    return
}

define int64 @fibonacci(int64 %k) {
    :entry
    int64 %if
    int64 %a
    int64 %b
    int64 %i
    int64 %res

    %if <- %k = 1
    br %if :initialConditionTrue :initialConditionFalse

    :initialConditionFalse
    %if <- %k = 2    
    br %if :initialConditionTrue :initialConditionFalse2
    
    :initialConditionFalse2
    %a <- 1
    %b <- 1
    %i <- 3
    %res <- 0
    br :for
    
    :for

        %if <- %i <= %k
        br %if :forIntoLoop :forBreak
        :forBreak
        return %res
        
        :forIntoLoop
        %res <- %a
        %res <- %res + %b
        %a <- %b
        %b <- %res
        
    %i <- %i + 1
    br :for
        
    :initialConditionTrue
    return 1
}
