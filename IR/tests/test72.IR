// gcd
// contains recursive calls

define void @main() {
    :entry
    int64 %res
    %res <- call @gcd(541, 7919)
    %res <- %res << 1
    %res <- %res + 1
    call print(%res)
    return
}

define int64 @gcd(int64 %a, int64 %b) {
    :entry
    int64 %if
    int64 %aModB
    int64 %res
    %if <- %b = 0
    br %if :initialConditionTrue :initialConditionFalse
    
    :initialConditionFalse
    %aModB <- call @mod(%a, %b)
    %res <- call @gcd(%b, %aModB)
    return %res
    
    :initialConditionTrue
    return %a
}

define int64 @mod(int64 %a, int64 %b) {
    :entry
    int64 %i
    int64 %res
    int64 %if
    int64 %bi
    %i <- 0
    %res <- %a
    br :while
    
    :while

        %bi <- %b * %i
        %if <- %bi <= %a
        br %if :whileInto :whileBreak
        
        :whileBreak
        return %res
        
        :whileInto
        %res <- %a
        %res <- %res - %bi
        br :whileIncrement

    :whileIncrement
    %i <- %i + 1
    br :while
}
