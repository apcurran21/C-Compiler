define int64 @succ(int64 %uu1, int64 %uu2, int64 %uu3, int64 %uu4, int64 %uu5, int64 %uu6, int64 %n, int64 %uu8, int64 %uu9, int64 %uu10) {
:entry
  int64 %m
  %m <- %n + 1
  return %m
}

define int64 @sum_to(int64 %uu1, int64 %uu2, int64 %uu3, int64 %uu4, int64 %uu5, int64 %uu6, int64 %to) {
:entry
  int64 %sum
  int64 %from
  int64 %tmp_rdx
  int64 %icmp
  int64 %rsp_16
  int64 %tmp_rax
  %sum <- 0
  %from <- 0
  br :sum
:sum
  %tmp_rdx <- %to
  %icmp <- %tmp_rdx < %from
  br %icmp :end_sum :do
:do
  %sum <- %sum + %from
  %rsp_16 <- %from
  %tmp_rax <- call @succ(%uu1, %uu2, %uu3, %uu4, %uu5, %uu6, %rsp_16, 8, 9, 10)
  %from <- %tmp_rax
  br :sum
:end_sum
  return %sum
}

define void @main() {
:entry
  int64 %i
  int64 %sf
  int64 %icmp
  int64 %tmp_r12
  int64 %tmp_rax
  int64 %tmp_rcx
  int64 %tmp_rdi
  int64 %tmp_rdx
  int64 %rsp_16
  int64 %sft
  %i <- 0
  %sft <- 1
  br :for_go
:for_go
  %icmp <- %i <= 20
  br %icmp :next_go :end_go
:next_go
  %tmp_r12 <- %i
  %rsp_16 <- %tmp_r12
  %tmp_r12 <- %tmp_r12 + 1
  %tmp_rax <- call @sum_to(1, 2, 3, 4, 5, 6, %rsp_16)
  %tmp_rcx <- 1
  %tmp_rax <- %tmp_rax << %sft
  %tmp_rax <- %tmp_rax + %sft
  %tmp_rdi <- %tmp_rax
  call print(%tmp_rdi)
  %i <- %tmp_r12
  br :for_go
:end_go
  return
}
