// test "function-as-arg"
// expected: {s:5, 1, 3, 12, 14, 16} 

define int64 @double (int64 %v) {
  :entry
  %v <- %v * 2
  return %v
}

define int64 @plus_10 (int64 %v) {
  :entry
  %v <- %v + 10
  return %v
}

define void @map(int64[] %arr, code %f) {
  :entry
  int64 %len
  int64 %i
  int64 %done
  int64 %v
  %len <- length %arr 0
  %len <- %len >> 1
  %i <- 0
  br :cond

  :cond
  %done <- %i = %len
  br %done :end :loop

  :loop
  %v <- %arr[%i]
  %v <- call %f(%v)
  %arr[%i] <- %v
  %i <- %i + 1
  br :cond

  :end
  return
}

define void @main () {
  :defs
  int64 %v
  int64 %v_encoded
  int64[] %a
  code %func
  br :entry

  :entry
  %a <- new Array(7)
  %a[0] <- 1
  %a[1] <- 2
  %a[2] <- 3
  %func <- @double
  call @map(%a, %func)
  %func <- @plus_10
  call @map(%a, %func)
  %func <- @int_encode
  call @map(%a, %func)
  call print(%a)

  return
}

define int64 @int_encode (int64 %v) {
  :entry
  %v <- %v << 1
  %v <- %v + 1
  return %v
}
