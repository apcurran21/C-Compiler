define void @main ( ){

  :entry
  tuple %t
  int64 %v
  int64 %x
  %t <- call @createMyClosure(3)
  %v <- call @callMyClosure(%t, 4)
  %x <- call @encodeValue(%v)
  call print(%x)
  return 

}

define tuple @createMyClosure (int64 %p1){

  :entry
  int64 %x2
  tuple %p
  %x2 <- 21
  %p <- new Tuple(9)
  %p[0] <- @myF
  %p[1] <- 1
  %p[2] <- %p1
  %p[3] <- %x2
  return %p

}

define int64 @callMyClosure (tuple %c, int64 %argClosure){

  :entry
  int64 %finalResult
  int64 %finalResultEncoded
  code %fp
  %fp <- %c[0]
  int64 %arityOfC
  %arityOfC <- %c[1]
  int64 %checkArgs
  %checkArgs <- %arityOfC = 1
  br %checkArgs :true :false

  :true
  %finalResult <- call %fp(%c, %argClosure)
  %finalResultEncoded <- call @encodeValue(%finalResult)
  call print(%finalResultEncoded)
  return %finalResult

  :false
  return 0
}

define int64 @myF (tuple %c, int64 %p1){

  :entry
  int64 %x1
  int64 %x2
  %x1 <- %c[2]
  %x2 <- %c[3]
  int64 %r1
  int64 %r2
  %r1 <- %x1 + %x2
  %r2 <- %r1 + %p1
  return %r2

}

define int64 @encodeValue (int64 %v){

  :entry
  int64 %encodedV
  %encodedV <- %v
  %encodedV <- %encodedV << 1
  %encodedV <- %encodedV + 1
  return %encodedV

}
