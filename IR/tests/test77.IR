define void @main () {
    :MainEntry
    // Create 2 arrays of size 10
    int64 %ArrSize
    int64 %ArrSizeEncoded
    %ArrSize <- 10
    %ArrSizeEncoded <- %ArrSize << 1
    %ArrSizeEncoded <- %ArrSizeEncoded + 1

    // Create the arrays initialized with 2 and 4
    int64[] %Arr1
    int64[] %Arr2
    %Arr1 <- call @Alloc1DArr (%ArrSizeEncoded, 2)
    %Arr2 <- call @Alloc1DArr (%ArrSizeEncoded, 4)

    // Get the Sum of each array
    int64 %Arr1Sum
    int64 %Arr2Sum
    %Arr1Sum <- call @CalcArrSum(%Arr1)
    %Arr2Sum <- call @CalcArrSum(%Arr2)

    // Get sum and product of the arrays
    int64 %SumOfArr
    int64 %ProdOfArr
    %SumOfArr <- %Arr1Sum + %Arr2Sum
    %ProdOfArr <- %Arr1Sum * %Arr2Sum

    // Print Array 1 sum
    int64 %Arr1PrintVal
    %Arr1PrintVal <- %Arr1Sum << 1
    %Arr1PrintVal <- %Arr1PrintVal + 1
    call print(%Arr1PrintVal)
    
    // Print array 2 sum
    int64 %Arr2PrintVal
    %Arr2PrintVal <- %Arr2Sum << 1
    %Arr2PrintVal <- %Arr2PrintVal + 1
    call print(%Arr2PrintVal)

    // Print sum and product of arrs
    int64 %ArrSumPrintVal
    int64 %ArrProdPrintVal
    %ArrSumPrintVal <- %SumOfArr << 1
    %ArrSumPrintVal <- %ArrSumPrintVal + 1
    %ArrProdPrintVal <- %ProdOfArr << 1
    %ArrProdPrintVal <- %ArrProdPrintVal + 1
    call print(%ArrSumPrintVal)
    call print(%ArrProdPrintVal)

    return
}

define int64 @CalcArrSum(int64[] %TargetArr) {
    :CalcArrEntry
    // Initialize loop and sum vars
    int64 %ArrLen
    int64 %Count
    int64 %ArrSum
    int64 %ContLoop
    int64 %CurrElm

    %ArrLen <- length %TargetArr 0
    %ArrLen <- %ArrLen >> 1
    %Count <- 0
    %ArrSum <- 0
    br :Loop

    // Get offset and curr elm
    :Loop
    %CurrElm <- %TargetArr[%Count]

    // Increment count and add to sum
    %Count <- %Count + 1
    %ArrSum <- %ArrSum + %CurrElm

    // Decide if we should continue looping or return
    %ContLoop <- %Count < %ArrLen
    br %ContLoop :Loop :Stop
    
    :Stop
    return %ArrSum
}

define int64[] @Alloc1DArr(int64 %ArrSize, int64 %InitElmVal) {
    :Alloc1DEntry
    // create array of appropriate size
    int64[] %NewArr
    %NewArr <- new Array(%ArrSize)

    int64 %ArrLen
    int64 %Count
    int64 %ArrSum
    int64 %ContLoop

    %ArrLen <- length %NewArr 0
    %ArrLen <- %ArrLen >> 1
    %Count <- 0
    %ArrSum <- 0
    br :Loop

    // Get offset and curr elm
    :Loop
    %NewArr[%Count] <- %InitElmVal

    // Increment count
    %Count <- %Count + 1

    // Decide if we should continue looping or return
    %ContLoop <- %Count < %ArrLen
    br %ContLoop :Loop :Stop
    
    :Stop
    return %NewArr
}

