

define int64 @encode(int64 %i){
    :entry
    %i <- %i << 1
    %i <- %i + 1
    return %i
}

define int64 @decode(int64 %i){
    :entry
    %i <- %i >> 1
    return %i
}
define void @main() {
    :entry
    int64[][] %m1
    int64[][] %m2
    int64[][] %out
    int64 %i
    // 2 x 2 array
    %m1 <- new Array(5,5)
    %m1[0][0] <- 3
    %m1[0][1] <- 1
    %m1[1][0] <- 1
    %m1[1][1] <- 3
    call print (%m1)

    %m2 <- new Array(5,5)
    %m2[0][0] <- 3
    %m2[0][1] <- 3
    %i <- call @encode(7)
    %m2[1][0] <- %i
    %i <- call @encode(-2)
    %m2[1][1] <- %i

    call print (%m2)

    %out <- call @multiply(2, %m1, %m2)
    call print(%out)
    return
}

// Multiply together two NxN matrices, allocating a new
// matrix for the result
define int64[][] @multiply(int64 %n, int64[][] %m1, int64[][] %m2){
    :entry
    int64[][] %out
    int64 %i
    int64 %j
    int64 %k
    int64 %m1entry
    int64 %m2entry
    int64 %continue
    int64 %n_encoded
    int64 %n_enc
    int64 %accum
    %n_enc <- call @encode(%n)
    %out <- new Array(%n_enc, %n_enc)
    %i<- 0
    br :row_loop
    :row_loop
    %j<- 0
    br :column_loop
    :column_loop
    %accum <- 0
    %k <- %n
    br :dot_loop
    :dot_loop
    %m1entry<- %m1[%i][%k]
    %m1entry <- call @decode(%m1entry)
    %m2entry <- %m2[%k][%j]
    %m2entry <- call @decode(%m2entry)
    %m1entry <- %m1entry + %m2entry
    %m1entry <- call @encode(%m1entry)
    %out[%i][%j]  <- %m1entry
    %k <- %k + 1
    %continue <- %k < %n
    br %k :dot_loop :finished_dot
    :finished_dot
    %j <- %j + 1
    %continue <- %j < %n
    br %continue :column_loop :finished_column
    :finished_column
    %i <- %i + 1
    %continue <- %i < %n
    br %continue :row_loop :return
    :return
    return %out
}
