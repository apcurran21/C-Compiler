(@go
(@fibonacci
	1 1
	mem rsp 0 <- r12
	cjump rdi = 0 :zero
	goto :general
	:zero
	rax <- 0
	r12 <- mem rsp 0
	return
	:one
	rdi <- rdx
	call print 1
	rax <- 1
	r12 <- mem rsp 0
	return
	:general
	r12 <- rdi
	r12 += 1
	rdi <- r12
	rdi <<= 1
	rdi++
	rsi <- 1
	call allocate 2
	mem rax 16 <- 3
	rdx <- rax
	rsi <- 24
	rcx <- r12
	rcx <<= 3
	rcx += 8
	cjump r12 = 2 :one
	goto :loop
	:loop
	r12 <- rdx
	r12 += rsi
	rdi <- mem r12 -8
	rdi--
	rdi >>= 1
	r8 <- mem r12 -16
	r8--
	r8 >>= 1
	rdi += r8
	rdi <<= 1
	rdi++
	mem r12 0 <- rdi
	rsi += 8
	cjump rsi < rcx :loop
	goto :after
	:after
	rdi <- rdx
	call print 1
	rax <- mem r12 0
	rax--
	rax >>= 1
	r12 <- mem rsp 0
	return
)

(@go
	0 0
	mem rsp -8 <- :fibonacci_ret
	rdi <- 13
	call @fibonacci 1
	:fibonacci_ret
	rdi <- rax
	rdi <<= 1
	rdi++
	call print 1
	return
)

)
