(@go
(@go
	0 1
	mem rsp 0 <- r12
	rdi <- 5
	rsi <- 5
	call allocate 2
	r12 <- rax
	rdi <- r12
	call print 1
	rdi <- r12
	mem rsp -8 <- :printArray_ret
	call @printArray 1
	:printArray_ret
	r12 <- mem rsp 0
	return
)

(@printArray
	1 3
	mem rsp 16 <- r14
	mem rsp 8 <- r13
	mem rsp 0 <- r12
	r12 <- rdi
	r13 <- 2
	mem rsp -8 <- :checkArray_ret
	call @checkArray 1
	:checkArray_ret
	cjump rax = 0 :isInt1
	goto :isAnArray1
	:isInt1
	rax <- 0
	r12 <- mem rsp 0
	r13 <- mem rsp 8
	r14 <- mem rsp 16
	return
	:isAnArray1
	r14 <- 0
	cjump r14 < r13 :loop_start
	goto :loop_end
	:loop_start
	rdi <- r12
	rsi <- r14
	mem rsp -8 <- :printArrayElement_ret
	call @printArrayElement 2
	:printArrayElement_ret
	r14++
	cjump r14 < r13 :loop_start
	goto :loop_end
	:loop_end
	r12 <- mem rsp 0
	r13 <- mem rsp 8
	r14 <- mem rsp 16
	return
)

(@printArrayElement
	2 2
	mem rsp 8 <- r13
	mem rsp 0 <- r12
	r13 <- rdi
	r12 <- rsi
	rdi <- rsi
	mem rsp -8 <- :printValue_ret1
	call @printValue 1
	:printValue_ret1
	r12 *= 8
	r12 += 8
	rdi <- r12
	mem rsp -8 <- :printValue_ret2
	call @printValue 1
	:printValue_ret2
	rdi <- r12
	rdi += r13
	r12 <- mem rdi 0
	rdi <- r12
	mem rsp -8 <- :checkArray_ret1
	call @checkArray 1
	:checkArray_ret1
	cjump rax = 0 :isInt2
	goto :isAnArray2
	:isInt2
	rdi <- r12
	mem rsp -8 <- :printValue_ret3
	call @printValue 1
	:printValue_ret3
	r12 <- mem rsp 0
	r13 <- mem rsp 8
	return
	:isAnArray2
	rdi <- r12
	mem rsp -8 <- :printArray_ret1
	call @printArray 1
	:printArray_ret1
	r12 <- mem rsp 0
	r13 <- mem rsp 8
	return
)

(@checkArray
	1 0
	rdi &= 1
	cjump rdi = 0 :isAnArray
	goto :isAnInt
	:isAnInt
	rax <- 0
	return
	:isAnArray
	rax <- 1
	return
)

(@printValue
	1 0
	rdi <<= 1
	rdi++
	call print 1
	return
)

)
