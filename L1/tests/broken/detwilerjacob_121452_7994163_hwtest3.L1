//This creates an array, sums the elements, and the prints half the result
(@hwtest3
    (@hwtest3 0 1
        mem rsp -8 <- :ret1 //store return address on stack
        call @make_array 0
	 
	:ret1
	
	r12 <- 2
	r13 <- 0

	:ret2
	r14 @ rax r12 4
	r13 += mem r14 0
	
	r12 += 2
	cjump r12 <= rdi :ret2

	rdi <- r13
	// print has the effect of decoding x64 to x63 and thus halfs the number and will print 850 because int63 from int64 1700
	rdi *= 2
	rdi += 1
	
	call print 1

	mem rsp -8 <- :ret3 //store return address on stack
	call @make_array2 0
	:ret3
	rdi <- rax
	call print 1 //will print a 10 and 10 4s because print displays decoded values from memory
	return
    )

    (@make_array 0 1
        rdi <- 201 //pass in arg1
	mem rsp 0 <- rdi
	
        rsi <- 17 //pass in arg2
	call allocate 2
	
	rdi <- mem rsp 0
        return 
    )

    (@make_array2 0 0
        rdi <- 21 //pass in arg1
        rsi <- 9 //pass in arg2
        call allocate 2

        return
    )

)

