(@go
(@go
	0 1
	rdi <- 5
	rsi <- 5
	call allocate 2
	mem rsp 0 <- rax
	rdi <- mem rsp 0
	call print 1
	rdi <- mem rsp 0
	mem rsp -8 <- :printArray_ret
	call @printArray 1
	:printArray_ret
	return
)

(@printArray
	1 3
	mem rsp 16 <- rdi
	mem rsp 8 <- 2
	mem rsp -8 <- :checkArray_ret
	call @checkArray 1
	:checkArray_ret
	cjump rax = 0 :isInt1 
goto :isAnArray1

	:isInt1
	rax <- 0
	return
	:isAnArray1
	mem rsp 0 <- 0
	rsi <- mem rsp 0
	rdi <- mem rsp 8
	cjump rsi < rdi :loop_start 
goto :loop_end

	:loop_start
	rdi <- mem rsp 16
	rsi <- mem rsp 0
	mem rsp -8 <- :printArrayElement_ret
	call @printArrayElement 2
	:printArrayElement_ret
	rdi <- mem rsp 0
	rdi++
	mem rsp 0 <- rdi
	rsi <- mem rsp 0
	rdi <- mem rsp 8
	cjump rsi < rdi :loop_start 
goto :loop_end

	:loop_end
	return
)

(@printArrayElement
	2 3
	mem rsp 16 <- rdi
	mem rsp 8 <- rsi
	rdi <- rsi
	mem rsp -8 <- :printValue_ret1
	call @printValue 1
	:printValue_ret1
	rdi <- mem rsp 8
	mem rsp 0 <- rdi
	rdi <- mem rsp 0
	rdi *= 8
	mem rsp 0 <- rdi
	rdi <- mem rsp 0
	rdi += 8
	mem rsp 0 <- rdi
	rdi <- mem rsp 0
	mem rsp -8 <- :printValue_ret2
	call @printValue 1
	:printValue_ret2
	rsi <- mem rsp 0
	rdi <- mem rsp 16
	rsi += rdi
	rdi <- mem rsi 0
	mem rsp 0 <- rdi
	rdi <- mem rsp 0
	mem rsp -8 <- :checkArray_ret1
	call @checkArray 1
	:checkArray_ret1
	cjump rax = 0 :isInt2 
goto :isAnArray2

	:isInt2
	rdi <- mem rsp 0
	mem rsp -8 <- :printValue_ret3
	call @printValue 1
	:printValue_ret3
	return
	:isAnArray2
	rdi <- mem rsp 0
	mem rsp -8 <- :printArray_ret1
	call @printArray 1
	:printArray_ret1
	return
)

(@checkArray
	1 0
	rdi <- rdi
	rdi &= 1
	cjump rdi = 0 :isAnArray 
goto :isAnInt

	:isAnInt
	rax <- 0
	return
	:isAnArray
	rax <- 1
	return
)

(@printValue
	1 0
	rdi <- rdi
	rdi <<= 1
	rdi++
	rdi <- rdi
	call print 1
	return
)

)
