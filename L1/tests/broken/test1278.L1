(@printArray
(@printArray
	1 2
	mem rsp 8 <- r13
	mem rsp 0 <- r12
	r13 <- rdi
	rdi &= 1
	cjump rdi = 0 :isArr
	goto :notArr
	:notArr
	rax <- 0
	r12 <- mem rsp 0
	r13 <- mem rsp 8
	return
	:isArr
	rsi <- 0
	r12 <- mem r13 0
	cjump rsi = r12 :endLoop
	goto :loopArr
	:loopArr
	rdi <- r13
	mem rsp -8 <- :elemRet
	call @printArrayElement 2
	:elemRet
	rsi++
	cjump rsi < r12 :loopArr
	goto :endLoop
	:endLoop
	rax <- 1
	r12 <- mem rsp 0
	r13 <- mem rsp 8
	return
)

(@printArrayElement
	2 2
	mem rsp 8 <- r13
	mem rsp 0 <- r12
	r13 <- rdi
	r12 <- rsi
	rdi <- r12
	rdi <<= 1
	rdi++
	call print 1
	rdi <- r12
	rdi *= 8
	rdi += 8
	r12 <- rdi
	rdi <<= 1
	rdi++
	call print 1
	rdi <- r13
	rdi += r12
	rdi <- mem rdi 0
	rsi <- rdi
	rdi &= 1
	cjump rdi = 0 :isArr2
	goto :notArr2
	:isArr2
	rdi <- rsi
	mem rsp -8 <- :recPrintArr
	call @printArray 1
	:recPrintArr
	r12 <- mem rsp 0
	r13 <- mem rsp 8
	return
	:notArr2
	rdi <- rsi
	call print 1
	r12 <- mem rsp 0
	r13 <- mem rsp 8
	return
)

)
