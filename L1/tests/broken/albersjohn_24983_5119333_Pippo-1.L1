// Specify rdi at the beginning
// Fill array with increasing uints from 0 to (decoded rdi)
// Walk array & print

(@go
 (@go
  1 0
  rdi <- 11 // N

  mem rsp -8 <- :populate_ree
  call @populate 1
  :populate_ree

  return
  )
 (@populate
  1 5

   // Allocate each row of the 2D array as a separate array
   // Push each one's address onto the stack
   r12 <- rsp // points to where we write the array address (callee save)
   rsi <- 0 // rdi already contains the size, initialize with zeros

   :allocate_array
     r13 <- rsi // rsi is caller save
     rsi <<= 1
     rsi += 1
     r14 <- rdi // rdi is caller save
     call allocate 2
    
 
     // Push array address onto stack, reload registers, increment
     mem r12 0 <- rax // Push address onto stack
     rsi <- r13
     rdi <- r14
     r14 >>= 1
     rsi += 1 // Which array we're populating
     r12 += 8 // Where on the stack we're holding things
     goto :bound_check

   :bound_check
     cjump rsi < r14 :allocate_array 
goto :wrap


   :wrap
     r14 <- rdi // We don't need rsi afterward so don't save it
     call allocate 2
     rdi <- r14
     rdi >>= 1
     r13 <- rax // Head of the 2D array

     :populate_outer_array
       r12 -= 8	
       rax += 8 // Skip the array header
       r15 <- mem r12 0 // Pop stack into r15
       mem rax 0 <- r15 // Write to array of ptrs


       rdi -= 1
       goto :outer_bound_check

     :outer_bound_check
       cjump 0 <= rdi :populate_outer_array 
goto :print_array


     :print_array
       rdi <- r13
       call print 1
       return
 )
)
