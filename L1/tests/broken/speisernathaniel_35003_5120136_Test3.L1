
//put numbers in r10, r11
// if both encoded numbers add together
// if both not encode, multiply
// if only one encode, &
(@go
  (@go
    0 0
    r10 <- 5
    r11 <- 4

    r12 <- r10
    r12 &= 1
    cjump r12 = 1 :firstIsNum 
goto :firstIsMem


    :firstIsNum
    r13 <- r11
    r13 &= 1
    cjump r13 = 1 :bothNum 
goto :firstNum_SecMem


    :firstIsMem
    r14 <- r11
    r14 &= 1
    cjump r14 = 1 :firstMem_SecNum 
goto :bothMem


    :bothNum
    r10 >>= 1
    r11 >>= 1
    rdi <- r10
    rdi += r11
    rdi <<= 1
    rdi += 1
    goto :ret

    :bothMem
    r10 >>= 1
    r11 >>= 1
    rdi <- r10
    rdi *= r11
    rdi <<= 1
    rdi += 1
    goto :ret

    :firstNum_SecMem
    r11 += 1
    goto :diff

    :firstMem_SecNum
    r10 += 1
    goto :diff

    :diff
    rdi <- r10
    rdi &= r11
    goto :ret




    :ret
    call print 1
    return

  ))
