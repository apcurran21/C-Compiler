(@go
(@fibonacci
	1 2
	cjump rdi = 0 :zero
	goto :general
	:zero
	rax <- 0
	return
	:one
	rdi <- rdx
	call print 1
	rax <- 1
	return
	:general
	rdi <- rdi
	mem rsp 8 <- rdi
	rdi <- mem rsp 8
	rdi += 1
	mem rsp 8 <- rdi
	rdi <- mem rsp 8
	rdi <- rdi
	rdi <<= 1
	rdi++
	rsi <- 1
	call allocate 2
	mem rax 16 <- 3
	rdi <- rax
	mem rsp 0 <- rdi
	rdx <- rax
	rsi <- 24
	rdi <- mem rsp 8
	rcx <- rdi
	rcx <<= 3
	rcx += 8
	rdi <- mem rsp 8
	cjump rdi = 2 :one
	goto :loop
	:loop
	rdi <- rdx
	mem rsp 0 <- rdi
	rdi <- mem rsp 0
	rdi += rsi
	mem rsp 0 <- rdi
	rdi <- mem rsp 0
	r8 <- mem rdi -8
	r8--
	r8 >>= 1
	rdi <- mem rsp 0
	rdi <- mem rdi -16
	rdi--
	rdi >>= 1
	r8 += rdi
	r8 <<= 1
	r8++
	rdi <- mem rsp 0
	mem rdi 0 <- r8
	rsi += 8
	cjump rsi < rcx :loop
	goto :after
	:after
	rdi <- rdx
	call print 1
	rdi <- mem rsp 0
	rax <- mem rdi 0
	rax--
	rax >>= 1
	return
)

(@go
	0 0
	mem rsp -8 <- :fibonacci_ret
	rdi <- 13
	call @fibonacci 1
	:fibonacci_ret
	rdi <- rax
	rdi <<= 1
	rdi++
	call print 1
	return
)

)
