// Tests a number for primality
(@main
(@sqrt_ceil
 1 3
 mem rsp 0 <- rdi
 mem rsp 8 <- 1
 mem rsp 16 <- r12
 :sqrt_start
 r12 <- mem rsp 8
 r12 *= r12
 rdi <- mem rsp 0
 cjump rdi < r12 :sqrt_end
 mem rsp 8 += 1
 goto :sqrt_start
 :sqrt_end
 rax <- mem rsp 8
 r12 <- mem rsp 16
 return
 )
(@mod
  2 0
  :divloop
  cjump rdi < rsi :divend
  rdi -= rsi
  goto :divloop
  :divend
  rax <- rdi
  return
 )
 (@primetest
   1 4
   mem rsp 0 <- rdi
   mem rsp 8 <- 2

   rdi <- mem rsp 0
   mem rsp -8 <- :sqrt_ret2
   call @sqrt_ceil 1
   :sqrt_ret2
   mem rsp 16 <- rax
   rdi <- mem rsp 8
   :primetest_loop
   rdi <- mem rsp 0
   rsi <- mem rsp 8
   mem rsp -8 <- :mod_ret
   call @mod 2
   :mod_ret
   cjump rax = 0 :iscomposite
   mem rsp 8 += 1
   rsi <- mem rsp 8
   rdi <- mem rsp 16
   cjump rdi < rsi :isprime
   goto :primetest_loop
   :isprime
   rax <- 1
   return
   :iscomposite
   rax <- 0
   return
  )
 (@main
  0 1
  mem rsp 0 <- 289
  rdi <- mem rsp 0
  rdi <<= 1
  rdi++
  call print 1
  rdi <- mem rsp 0
  mem rsp -8 <- :primetest_ret
  call @primetest 1
  :primetest_ret
  rdi <- rax
  rdi <<= 1
  rdi ++
  call print 1
  return
  )
)
