// Creates an array of 10 integers and prints said array
(@make
  (@make
    0 0
    // Testing adding more than 6 arguments to stack
    rdi <- 9
    rsi <- 1
    rdx <- 1
    rcx <- 9
    r8 <- 3
    r9 <- 5
    mem rsp -16 <- 5
    mem rsp -24 <- 1
    mem rsp -32 <- 9
    mem rsp -40 <- 5
    mem rsp -8 <- :find_ret
    call @find 10
    :find_ret
    return
  )
  (@find
    10 12
    // Saving callee-saved registers
    mem rsp 0 <- r12
    mem rsp 8 <- r13
    mem rsp 16 <- r14
    mem rsp 24 <- r15
    mem rsp 32 <- rbp
    mem rsp 40 <- rbx
    // Creating the array
    r12 <- rdi
    r13 <- rsi
    rdi <- 10
    rdi <<= 1
    rdi ++
    rsi <- 0
    rsi <<= 1
    rsi ++
    mem rsp 48 <- rdi
    mem rsp 56 <- rsi
    mem rsp 64 <- rdx
    mem rsp 72 <- rcx
    mem rsp 80 <- r8
    mem rsp 88 <- r9
    call allocate 2
    rdi <- mem rsp 48
    rsi <- mem rsp 56
    rdx <- mem rsp 64
    rcx <- mem rsp 72
    r8 <- mem rsp 80
    r9 <- mem rsp 88

    // Encoding the elements
    r12 <<= 1
    r12 ++
    r13 <<= 1
    r13 ++
    rdx <<= 1
    rdx ++
    rcx <<= 1
    rcx ++
    r8 <<= 1
    r8 ++
    r9 <<= 1
    r9 ++

    // Loading in the elements
    mem rax 8 <- r12
    mem rax 16 <- r13
    mem rax 24 <- rdx
    mem rax 32 <- rcx
    mem rax 40 <- r8
    mem rax 48 <- r9
    r14 <- 96
    // Address of first argument in stack
    r14 += rsp
    // Offset modifier (index of current argument)
    r15 <- 0
    rdi <- 56

    :load
    // Address of current argument in stack
    rbp @ r14 r15 8
    // Value of current argument in stack
    rbx <- mem rbp 0
    rbx <<= 1
    rbx ++
    rsi @ rdi r15 8
    rsi += rax
    mem rsi 0 <- rbx
    r15 ++
    cjump r15 <= 3 :load

    // restoring callee-saved registers
    r12 <- mem rsp 0
    r13 <- mem rsp 8
    r14 <- mem rsp 16
    r15 <- mem rsp 24
    rbp <- mem rsp 32
    rbx <- mem rsp 40

    // printing array
    rdi <- rax
    call print 1
    return
  )
)


