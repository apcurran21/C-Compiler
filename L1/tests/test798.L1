(@go
(@fibonacci
	1 2
	cjump rdi = 0 :zero
	goto :general
	:zero
	rax <- 0
	return
	:one
	rdi <- rdx
	call print 1
	rax <- 1
	return
	:general
	rdi <- rdi
	mem rsp 0 <- rdi
	rdi <- mem rsp 0
	rdi += 1
	mem rsp 0 <- rdi
	rdi <- mem rsp 0
	rdi <- rdi
	rdi <<= 1
	rdi++
	rsi <- 1
	call allocate 2
	mem rax 16 <- 3
	rdx <- rax
	rsi <- 24
	rdi <- mem rsp 0
	rdi <- rdi
	rdi <<= 3
	rdi += 8
	rcx <- mem rsp 0
	cjump rcx = 2 :one
	goto :loop
	:loop
	rcx <- rdx
	mem rsp 8 <- rcx
	rcx <- mem rsp 8
	rcx += rsi
	mem rsp 8 <- rcx
	rcx <- mem rsp 8
	r8 <- mem rcx -8
	r8--
	r8 >>= 1
	rcx <- mem rsp 8
	rcx <- mem rcx -16
	rcx--
	rcx >>= 1
	r8 += rcx
	r8 <<= 1
	r8++
	rcx <- mem rsp 8
	mem rcx 0 <- r8
	rsi += 8
	cjump rsi < rdi :loop
	goto :after
	:after
	rdi <- rdx
	call print 1
	rdi <- mem rsp 8
	rax <- mem rdi 0
	rax--
	rax >>= 1
	return
)

(@go
	0 0
	mem rsp -8 <- :fibonacci_ret
	rdi <- 13
	call @fibonacci 1
	:fibonacci_ret
	rdi <- rax
	rdi <<= 1
	rdi++
	call print 1
	return
)

)
