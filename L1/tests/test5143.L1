(@main
	(@main 0 0
			rdi <- 5
			rsi <- 7
			call allocate 2
			
			rdi <- rax

			mem rsp -8 <- :print_array_main_ret
			
			call @printArray 1
			
			:print_array_main_ret

			return
    )

	(@printArray 1 3
			// push callee save registers before altering
			mem rsp 0 <- r12

			// check if passed in value is actually array
			// based on encoding, memory values have 0 in their LSB
			r12 <- 1
			r12 &= rdi
			cjump r12 = 0 :true 
goto :false

		
		:false
			// return false 
			rax <- 0
			return
		
		:true
			// loop counter i variable
			rsi <- 0

			// size of array
			r12 <- mem rdi 0

			// start loop by checking condition
			goto :loop_cond

		:body
			// push caller save registers before printing array element
			mem rsp 8 <- rdi
			mem rsp 16 <- rsi

			// rdi already holds array
			// rsi already holds index
			mem rsp -8 <- :print_array_element_ret
			
			call @printArrayElement 2

			:print_array_element_ret
			
			// pop caller save registers after printing array element
			rdi <- mem rsp 8
			rsi <- mem rsp 16

			// increment index
			rsi++
			
		:loop_cond
			// check that still have values to print
	

			cjump rsi < r12 :body 
goto :cont


		:cont
			// pop callee save registers before returning
			r12 <- mem rsp 0
			// return true
			rax <- 1
			return
	)

	(@printArrayElement 2 7 
			mem rsp 0 	<- r12
			mem rsp 8 	<- r13
			mem rsp 16 <- r14
			
			// stash array pointer in memory location
			mem rsp 24 <- rdi
			// save rsi because caller save
			mem rsp 32 <- rsi

			// pass index to print in rdi
			rdi <- rsi
			rdi <<= 1
			rdi++
			// print index
			call print 1

			// calculate offset
			// put saved rsi value in r12 to calculate offset
			// r12 won't be overwritten because callee save
			r12 <- mem rsp 32
			r12 *= 8
			r12 += 8

			rdi <- r12
			rdi <<= 1
			rdi++
			// print offset
			call print 1
			
			// check if value at index is array
			// based on encoding, memory values have 0 in their LSB
			
			// accessing dynamic location in array?
			// rdi is array pointer
			// r12 holds correct offset
			// reload rdi because caller save
			rdi <- mem rsp 24


			rdi += r12
			
			// can't use r12 as M in mem access so what do we do?
			r13 <- mem rdi 0


			// check if value at index is array
			// index no longer needed so okay to reuse r12
			r12 <- 1
			r12 &= r13


			// regardless of cjump am going to pass r13
			rdi <- r13

			cjump r12 = 0 :array 
goto :not_array


		:array
			// pass array

			mem rsp -8 <- :print_array_ret
			
			call @printArray 1

			:print_array_ret

			r12 <- mem rsp 0
			r13 <- mem rsp 8
			r14 <- mem rsp 16
			
			return

		:not_array
			// print integer value
			call print 1
		
			r12 <- mem rsp 0
			r13 <- mem rsp 8
			r14 <- mem rsp 16

			return
	)
)
