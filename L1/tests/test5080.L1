(@main
  (@main
    0 0
    rdi <- 7
    rsi <- 7
    call allocate 2
    rdi <- rax

    mem rsp -8 <- :printArray_ret
    call @printArray 1
    :printArray_ret

    return
  )

  (@printArray
    1 3
    // save r12 hold array size
    mem rsp 0 <- r12


    // and-equals with 1 to determine lowest bit
    r12 <- 1
    r12 &= rdi
    cjump r12 = 0 :is_array
goto :not_array


    :not_array
    rax <- 0
    return

    :is_array
    // index counter...
    rsi <- 0
    // ...and array size
    r12 <- mem rdi 0

    goto :loop

    :continue
    // save array pointer
    mem rsp 8 <- rdi
    // save index
    mem rsp 16 <- rsi

    mem rsp -8 <- :printArrayElement_ret
    call @printArrayElement 2
    :printArrayElement_ret

    rdi <- mem rsp 8
    rsi <- mem rsp 16

    // i++
    rsi++

    :loop
    cjump rsi < r12 :continue
goto :end


    :end
    rax <- 1
    r12 <- mem rsp 0
    return
  )

  (@printArrayElement
    2 3
    // love the shape of the characters r12 if anyone is reading this, hope you're having a great day!
    mem rsp 0 <- r12
    // need rdi arg for print calls
    mem rsp 8 <- rdi

    // print the index
    rdi <- rsi
    rdi <<= 1
    rdi++
    // calling print breaks rsi caller save
    mem rsp 16 <- rsi
    call print 1
    rsi <- mem rsp 16

    // memory offset
    r12 <- rsi
    r12 *= 8
    r12 += 8

    rdi <- r12
    rdi <<= 1
    rdi++
    call print 1

    // offset from array start
    rdi <- mem rsp 8
    rdi += r12
    rdi <- mem rdi 0

    // check for nested arrays
    r12 <- 1
    r12 &= rdi

    cjump r12 = 0 :is_array1
goto :not_array1


    // rdi holds an array
    :is_array1
    mem rsp -8 <- :printArray_ret1
    call @printArray 1
    :printArray_ret1

    r12 <- mem rsp 0
    return

    // rdi holds a number
    :not_array1
    call print 1

    r12 <- mem rsp 0
    return
  )
)
