(@testing
(@testing
	0 0
	rdi <- 5
	rsi <- 85
	mem rsp -8 <- :myfunc_ret
	call allocate 2
	:myfunc_ret
	mem rax 16 <- 5
	rdi <- rax
	mem rsp -8 <- :rett
	call @printArray 1
	:rett
	return
)

(@printArray
	1 3
	mem rsp 16 <- r14
	mem rsp 8 <- r13
	mem rsp 0 <- r12
	rsi <- rdi
	rsi &= 1
	cjump rsi = 0 :isarray
	goto :notarray
	:notarray
	rax <- 0
	r12 <- mem rsp 0
	r13 <- mem rsp 8
	r14 <- mem rsp 16
	return
	:isarray
	r13 <- 0
	r14 <- rdi
	r12 <- mem rdi 0
	:forloop
	cjump r13 < r12 :continue
	goto :done
	:continue
	rdi <- r14
	rsi <- r13
	mem rsp -8 <- :ret
	call @printArrayElement 2
	:ret
	r13++
	goto :forloop
	:done
	rax <- 1
	r12 <- mem rsp 0
	r13 <- mem rsp 8
	r14 <- mem rsp 16
	return
)

(@printArrayElement
	2 2
	mem rsp 8 <- r13
	mem rsp 0 <- r12
	r13 <- rdi
	r12 <- rsi
	rdi <- r12
	rdi <<= 1
	rdi += 1
	call print 1
	rdi <- r12
	rdi *= 8
	rdi += 8
	rdi <<= 1
	rdi += 1
	r12 <- rdi
	call print 1
	r12 >>= 1
	r13 += r12
	rdi <- mem r13 0
	rsi <- rdi
	rsi &= 1
	rdi <- rdi
	cjump rsi = 0 :isarr
	goto :notarr
	:notarr
	call print 1
	goto :fnc_ret
	:isarr
	mem rsp -8 <- :fnc_ret
	call @printArray 1
	:fnc_ret
	r12 <- mem rsp 0
	r13 <- mem rsp 8
	return
)

)
