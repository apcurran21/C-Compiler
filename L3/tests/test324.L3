define @main() {

  %arr <- call @createArray()  
  call @printArr(%arr)
  %sum <- call @sumArr(%arr)

  %sum <- %sum << 1
  %sum <- %sum + 1
  call print(%sum)
  return
}

define @createArray() {
  %len <- 13
  %arr <- call allocate(%len, 1)

  %newVar0 <- 0 * 8
  %newVar1 <- %newVar0 + 8
  %newVar2 <- %arr + %newVar1
  store %newVar2 <- 3 

  %newVar3 <- 1 * 8
  %newVar4 <- %newVar3 + 8
  %newVar5 <- %arr + %newVar4
  store %newVar5 <- 7 

  %newVar6 <- 2 * 8
  %newVar7 <- %newVar6 + 8
  %newVar8 <- %arr + %newVar7
  store %newVar8 <- 5 

  %newVar9 <- 3 * 8
  %newVar10 <- %newVar9 + 8
  %newVar11 <- %arr + %newVar10
  store %newVar11 <- 5 

  %newVar12 <- 4 * 8
  %newVar13 <- %newVar12 + 8
  %newVar14 <- %arr + %newVar13
  store %newVar14 <- 5 

  %newVar15 <- 5 * 8
  %newVar16 <- %newVar15 + 8
  %newVar17 <- %arr + %newVar16
  store %newVar17 <- 5 

  return %arr
}

// return length of array
define @arrLen (%arr) {
  %len <- load %arr  

  return %len
}

define @printArr (%arr) {
  %len <- load %arr

  %count <- 0
  %curr <- %arr
  :loop
  %curr <- %curr + 8
  %currP <- load %curr
  
  %currP <- %currP << 1
  %currP <- %currP + 1
  call print(%currP)

  %count <- %count + 1
  %cont <- %count < %len 
  br %cont :loop
  br :stop
  :stop

  return
}

// return %sum of array, and printing cumulative %sum at each step
define @sumArr(%arr) {
  %len <- load %arr
  %sum <- 0

  %count <- 0
  %curr <- %arr
  :loop
  %curr <- %curr + 8
  %temp1 <- load %curr
  %sum <- %sum + %temp1
  
  %sumP <- %sum << 1
  %sumP <- %sumP + 1
  call print(%sumP)

  %count <- %count + 1
  %cont <- %count < %len
  br %cont :loop
  br :stop
  :stop

  return %sum
}
