// print the Fibonacci sequence (10 elems)
// {s:10, 0,1,1,2,3,5,8,13,21,34}
define @main (){
  // the number of elems, 2 at least
  %arg1 <- 10

  // cjump %arg1 < 2 :bad_input
  %invalid <- %arg1 < 2
  br %invalid :bad_input
  
  // array init:
  %arg1 <- %arg1 << 1
  %arg1 <- %arg1 + 1
  %count <- 1
  %arrayAddr <- call allocate(%arg1, 3)
  %pos0 <- %arrayAddr + 8
  %pos1 <- %arrayAddr + 16
  %pos2 <- %arrayAddr + 24
  store %pos0 <- 0
  store %pos1 <- 1
  
  // iteration:
  %arrayLen <- load %arrayAddr
  %count <- 3
  :loop
  %ifDone <- %arrayLen < %count
  br %ifDone :end_loop
  %val0 <- load %pos0
  %val1 <- load %pos1
  %val2 <- %val0 + %val1
  store %pos2 <- %val2
  %count <- %count + 1
  %pos0 <- %pos0 + 8
  %pos1 <- %pos1 + 8
  %pos2 <- %pos2 + 8
  br :loop
  
  // encode and print array:
  :end_loop

  call @array_encode(%arrayAddr)
  
  call print(%arrayAddr)
  
  :bad_input
  return
}
    
// encode elements in an array as numbers in-place,
// return the array address:
define @array_encode(%arrayAddr){
  %arrayLen <- load %arrayAddr
  %count <- 1
  %pos <- %arrayAddr + 8
  
  :loop_1
  %ifDone <- %arrayLen < %count
  br %ifDone :end_loop_1
  %val <- load %pos
  %val <- %val << 1
  %val <- %val + 1
  store %pos <- %val
  %count <- %count + 1
  %pos <- %pos + 8
  br :loop_1
  
  :end_loop_1
  return
}
