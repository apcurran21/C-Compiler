define @main () {
 
:NNNNNNNNNNNNNNNNN
 br :var_declarations
 
:bad_input
 return 
 
:end_loop
 call @array_encode (%arrayAddr)
 call print (%arrayAddr)
 return 
 
:loopbody
 %newVar1 <- 0
 %newVar2 <- 1
 %newVar1 <- %newVar1 + %pos0
 %newVar0 <- %newVar1 * 8
 %newVar0 <- %newVar0 + 24
 %newVar3 <- %arrayAddr + %newVar0
 %val0 <- load %newVar3
 %newVar5 <- 0
 %newVar6 <- 1
 %newVar5 <- %newVar5 + %pos1
 %newVar4 <- %newVar5 * 8
 %newVar4 <- %newVar4 + 24
 %newVar7 <- %arrayAddr + %newVar4
 %val1 <- load %newVar7
 %val2 <- %val0 + %val1
 %newVar9 <- 0
 %newVar10 <- 1
 %newVar9 <- %newVar9 + %pos2
 %newVar8 <- %newVar9 * 8
 %newVar8 <- %newVar8 + 24
 %newVar11 <- %arrayAddr + %newVar8
 store %newVar11 <- %val2
 %count <- %count + 1
 %pos0 <- %pos0 + 1
 %pos1 <- %pos1 + 1
 %pos2 <- %pos2 + 1
 br :loop
 
:loop
 %ifDone <- %arrayLen < %count
 br %ifDone :end_loop 
 br :loopbody
 
:good_input
 %arg1 <- call @int_encode (%arg1)
 %newVar13 <- %arg1 >> 1
 %newVar12 <- %newVar13
 %newVar12 <- %newVar12 << 1
 %newVar12 <- %newVar12 + 1
 %newVar12 <- %newVar12 + 4
 %arrayAddr <- call allocate (%newVar12, 1)
 %newVar14 <- %arrayAddr + 8
 store %newVar14 <- 3
 %newVar15 <- %arrayAddr + 16
 store %newVar15 <- %arg1
 %pos0 <- 0
 %pos1 <- 1
 %pos2 <- 2
 %newVar17 <- 0
 %newVar18 <- 1
 %newVar17 <- %newVar17 + %pos0
 %newVar16 <- %newVar17 * 8
 %newVar16 <- %newVar16 + 24
 %newVar19 <- %arrayAddr + %newVar16
 store %newVar19 <- 0
 %newVar21 <- 0
 %newVar22 <- 1
 %newVar21 <- %newVar21 + %pos1
 %newVar20 <- %newVar21 * 8
 %newVar20 <- %newVar20 + 24
 %newVar23 <- %arrayAddr + %newVar20
 store %newVar23 <- 1
 %newVar24 <- 0 * 8
 %newVar25 <- %newVar24 + 16
 %newVar26 <- %arrayAddr + %newVar25
 %arrayLen <- load %newVar26
 %arrayLen <- call @int_decode (%arrayLen)
 %count <- 3
 br :loop
 
:check_input
 %arg1 <- 10
 %invalid <- %arg1 < 2
 br %invalid :bad_input 
 br :good_input
 
:var_declarations
 br :check_input
}

define @array_encode (%arrayAddr) {
 
:NNNNNNNNNNN
 br :entry
 
:end_loop_1
 return 
 
:loop_body
 %newVar1 <- 0
 %newVar2 <- 1
 %newVar1 <- %newVar1 + %pos
 %newVar0 <- %newVar1 * 8
 %newVar0 <- %newVar0 + 24
 %newVar3 <- %arrayAddr + %newVar0
 %val <- load %newVar3
 %val <- call @int_encode (%val)
 %newVar5 <- 0
 %newVar6 <- 1
 %newVar5 <- %newVar5 + %pos
 %newVar4 <- %newVar5 * 8
 %newVar4 <- %newVar4 + 24
 %newVar7 <- %arrayAddr + %newVar4
 store %newVar7 <- %val
 %pos <- %pos + 1
 br :loop_1
 
:loop_1
 %ifDone <- %pos = %arrayLen
 br %ifDone :end_loop_1 
 br :loop_body
 
:entry
 %newVar8 <- 0 * 8
 %newVar9 <- %newVar8 + 16
 %newVar10 <- %arrayAddr + %newVar9
 %arrayLen <- load %newVar10
 %arrayLen <- call @int_decode (%arrayLen)
 %pos <- 0
 br :loop_1
}

define @int_encode (%v) {
 
:NNNNNN
 br :entry
 
:entry
 %v <- %v << 1
 %v <- %v + 1
 return %v
}

define @int_decode (%v) {
 
:NNNNNN
 br :entry
 
:entry
 %v <- %v >> 1
 return %v
}

