define @main () {
 
:NNNNNN
 br :entry
 
:entry
 %len <- 5
 %encodedLen <- %len << 1
 %encodedLen <- %len + 1
 %newVar1 <- %encodedLen >> 1
 %newVar0 <- %newVar1
 %newVar0 <- %newVar0 << 1
 %newVar0 <- %newVar0 + 1
 %newVar0 <- %newVar0 + 2
 %array <- call allocate (%newVar0, 1)
 %newVar2 <- %array + 8
 store %newVar2 <- %encodedLen
 %newVar4 <- 0
 %newVar5 <- 1
 %newVar4 <- %newVar4 + 0
 %newVar3 <- %newVar4 * 8
 %newVar3 <- %newVar3 + 16
 %newVar6 <- %array + %newVar3
 store %newVar6 <- 2
 %newVar8 <- 0
 %newVar9 <- 1
 %newVar8 <- %newVar8 + 1
 %newVar7 <- %newVar8 * 8
 %newVar7 <- %newVar7 + 16
 %newVar10 <- %array + %newVar7
 store %newVar10 <- 3
 %newVar12 <- 0
 %newVar13 <- 1
 %newVar12 <- %newVar12 + 2
 %newVar11 <- %newVar12 * 8
 %newVar11 <- %newVar11 + 16
 %newVar14 <- %array + %newVar11
 store %newVar14 <- 0
 %newVar16 <- 0
 %newVar17 <- 1
 %newVar16 <- %newVar16 + 3
 %newVar15 <- %newVar16 * 8
 %newVar15 <- %newVar15 + 16
 %newVar18 <- %array + %newVar15
 store %newVar18 <- 0
 %newVar20 <- 0
 %newVar21 <- 1
 %newVar20 <- %newVar20 + 4
 %newVar19 <- %newVar20 * 8
 %newVar19 <- %newVar19 + 16
 %newVar22 <- %array + %newVar19
 store %newVar22 <- 0
 %res <- call @sum (%array, %len)
 %res <- %res << 1
 %res <- %res + 1
 call print (%res)
 return 
}

define @sum (%array, %len) {
 
:NNNNNNNNN
 br :entry
 
:forBreak
 return %res
 
:forInto
 %newVar1 <- 0
 %newVar2 <- 1
 %newVar1 <- %newVar1 + %i
 %newVar0 <- %newVar1 * 8
 %newVar0 <- %newVar0 + 16
 %newVar3 <- %array + %newVar0
 %v <- load %newVar3
 %res <- %res + %v
 %i <- %i + 1
 br :for
 
:for
 %if <- %i < %len
 br %if :forInto 
 br :forBreak
 
:entry
 %i <- 0
 %res <- 0
 br :for
}

