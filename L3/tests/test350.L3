// fibonnaci
define @encode (%n) {
%res <- %n << 1
%res <- %res + 1
return %res
}

define @encoded_add (%a, %b) {
// optimized version
%a <- %a + %b
%a <- %a - 1
return %a
}

define @fib_impl (%a, %b, %count) {
:fib_impl__begin
// %count is encoded, encode(2) = 5
%count_lt_5 <- %count < 5
br %count_lt_5 :fib_impl__ret_b
br :fib_impl__recur

:fib_impl__ret_b
return %b

:fib_impl__recur
%new_b <- call @encoded_add(%a, %b)

%a <- %b
%b <- %new_b
// encode(1) = 3
%count <- %count - 2
// tail recursion!
br :fib_impl__begin
}

define @fib(%count) {
%res <- call @fib_impl(3, 3, %count)
return %res
}

define @main() {
%fib_arg <- 4
%encoded_fib_arg <- call @encode(%fib_arg)
%fib_res <- call @fib(%encoded_fib_arg)
call print(%fib_res)
return
}
