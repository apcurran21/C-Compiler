define @newmat(%arg1, %arg2)
{
    %row <- %arg1
    %arg1 <- %arg1 + %arg1
    %arg1 <- %arg1 + 1
    %row_enc <- %arg1
    %arg1 <- %arg1 + 4
    %arg2 <- %arg2 + %arg2
    %arg2 <- %arg2 + 1
    %col_enc <- %arg2
    %arg2 <- 1
    %arr <- call allocate(%arg1, %arg2)
    %arr_8 <- %arr + 8
    store %arr_8 <- %row_enc
    %arr_16 <- %arr + 16
    store %arr_16 <- %col_enc
    %rowptr <- %arr
    %i <- 0
    :nextcol
    %arg1 <- %col_enc
    %arg2 <- 1
    %arr <- call allocate(%arg1, %arg2)
    %arg1 <- %i * 8
    %arg1 <- %arg1 + %rowptr
    %arg1_24 <- %arg1 + 24
    store %arg1_24 <- %arr
    %i <- %i + 1
    %irow <- %i < %row
    br %irow :nextcol
    return %rowptr
}

// matset(a,i,j,v) = (a[i][j] := v)
define @matset(%arg1, %arg2, %arg3, %arg4)
{
    %off <- %arg2 * 8
    %off <- %off + %arg1
    %off_24 <- %off + 24
    %arg1 <- load %off_24

    %set <- %arg3 * 8
    %set <- %set + %arg1
    %set_8 <- %set + 8
    store %set_8 <- %arg4
    return
}

define @main()
{
    %arg1 <- 2
    %arg2 <- 5
    %arr <- call @newmat(%arg1, %arg2)
    %M <- %arr

    %arg1 <- %M
    call print(%arg1)

    %arg1 <- %M
    %arg2 <- 0
    %arg3 <- 1
    %arg4 <- 3
    call @matset(%arg1, %arg2, %arg3, %arg4)

    %arg1 <- %M
    %arg2 <- 0
    %arg3 <- 2
    %arg4 <- 5
    call @matset(%arg1, %arg2, %arg3, %arg4)

    %arg1 <- %M
    %arg2 <- 0
    %arg3 <- 3
    %arg4 <- 7
    call @matset(%arg1, %arg2, %arg3, %arg4)

    %arg1 <- %M
    %arg2 <- 1
    %arg3 <- 3
    %arg4 <- 9
    call @matset(%arg1, %arg2, %arg3, %arg4)

    %arg1 <- %M
    %arg2 <- 1
    %arg3 <- 0
    %arg4 <- -1
    call @matset(%arg1, %arg2, %arg3, %arg4)

    %arg1 <- %M
    call print(%arg1)
    return
}
