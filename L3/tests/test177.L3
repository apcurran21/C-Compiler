define @plus (%self, %x, %y) {
 
:NNNNNN
 br :_self
 
:_self
 %ans <- %x + %y
 return %ans
}

define @minus (%self, %x, %y) {
 
:NNNNNN
 br :_self
 
:_self
 %ans <- %x - %y
 return %ans
}

define @times (%self, %x, %y) {
 
:NNNNNN
 br :_self
 
:_self
 %ans <- %x * %y
 return %ans
}

define @main () {
 
:NNNNNNN
 br :_start
 
:exit
 return 
 
:L3
 %newVar1 <- %i * 8
 %newVar0 <- %newVar1 + 8
 %newVar2 <- %cGs + %newVar0
 %cG <- load %newVar2
 %newVar4 <- 0 * 8
 %newVar3 <- %newVar4 + 8
 %newVar5 <- %cG + %newVar3
 %g <- load %newVar5
 %cH <- call %g (%cG, %X)
 %newVar7 <- 0 * 8
 %newVar6 <- %newVar7 + 8
 %newVar8 <- %cH + %newVar6
 %h <- load %newVar8
 %ans <- call %h (%cH, %Y)
 %num <- %ans * 2
 %num <- %num + 1
 call print (%num)
 %i <- %i + 1
 %fin <- %i < 3
 br %fin :L3 
 br :exit
 
:L3b
 %i <- 0
 br :L3
 
:L2
 %newVar10 <- %i * 8
 %newVar9 <- %newVar10 + 8
 %newVar11 <- %ops + %newVar9
 %f <- load %newVar11
 %cF <- call allocate (3, 1)
 %newVar13 <- 0 * 8
 %newVar12 <- %newVar13 + 8
 %newVar14 <- %cF + %newVar12
 store %newVar14 <- %f
 %cG <- call @curry (%cF)
 %newVar16 <- %i * 8
 %newVar15 <- %newVar16 + 8
 %newVar17 <- %cGs + %newVar15
 store %newVar17 <- %cG
 %i <- %i + 1
 %fin <- %i < 3
 br %fin :L2 
 br :L3b
 
:L2b
 %cGs <- call allocate (7, 1)
 %i <- 0
 br :L2
 
:L1
 %newVar19 <- %i * 8
 %newVar18 <- %newVar19 + 8
 %newVar20 <- %ops + %newVar18
 %f <- load %newVar20
 %ans <- call %f (%ops, %X, %Y)
 %num <- %ans * 2
 %num <- %num + 1
 call print (%num)
 %i <- %i + 1
 %fin <- %i < 3
 br %fin :L1 
 br :L2b
 
:_start
 %ops <- call allocate (7, 1)
 %plus <- @plus
 %minus <- @minus
 %times <- @times
 %newVar22 <- 0 * 8
 %newVar21 <- %newVar22 + 8
 %newVar23 <- %ops + %newVar21
 store %newVar23 <- %plus
 %newVar25 <- 1 * 8
 %newVar24 <- %newVar25 + 8
 %newVar26 <- %ops + %newVar24
 store %newVar26 <- %minus
 %newVar28 <- 2 * 8
 %newVar27 <- %newVar28 + 8
 %newVar29 <- %ops + %newVar27
 store %newVar29 <- %times
 %X <- 7
 %Y <- 2
 %i <- 0
 br :L1
}

define @curry (%F) {
 
:NNNNNN
 br :start
 
:start
 %cF <- call allocate (5, 1)
 %newVar1 <- 0 * 8
 %newVar0 <- %newVar1 + 8
 %newVar2 <- %cF + %newVar0
 store %newVar2 <- @curry_arg1
 %newVar4 <- 1 * 8
 %newVar3 <- %newVar4 + 8
 %newVar5 <- %cF + %newVar3
 store %newVar5 <- %F
 return %cF
}

define @curry_arg1 (%self, %x) {
 
:NNNNNN
 br :start
 
:start
 %cF1 <- call allocate (7, 1)
 %newVar1 <- 1 * 8
 %newVar0 <- %newVar1 + 8
 %newVar2 <- %self + %newVar0
 %F <- load %newVar2
 %newVar4 <- 0 * 8
 %newVar3 <- %newVar4 + 8
 %newVar5 <- %cF1 + %newVar3
 store %newVar5 <- @curry_arg2
 %newVar7 <- 1 * 8
 %newVar6 <- %newVar7 + 8
 %newVar8 <- %cF1 + %newVar6
 store %newVar8 <- %F
 %newVar10 <- 2 * 8
 %newVar9 <- %newVar10 + 8
 %newVar11 <- %cF1 + %newVar9
 store %newVar11 <- %x
 return %cF1
}

define @curry_arg2 (%self, %y) {
 
:NNNNNN
 br :start
 
:start
 %newVar1 <- 1 * 8
 %newVar0 <- %newVar1 + 8
 %newVar2 <- %self + %newVar0
 %F <- load %newVar2
 %newVar4 <- 2 * 8
 %newVar3 <- %newVar4 + 8
 %newVar5 <- %self + %newVar3
 %x <- load %newVar5
 %newVar7 <- 0 * 8
 %newVar6 <- %newVar7 + 8
 %newVar8 <- %F + %newVar6
 %func <- load %newVar8
 %ans <- call %func (%F, %x, %y)
 return %ans
}

