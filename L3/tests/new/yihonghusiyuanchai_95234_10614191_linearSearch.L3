// function return the idx %val in %arr
// if not existed, return -1

define :linear_search(%val, %arr){
        
    %len <- load %arr
    %i <-  0                                    
    :loop1_begin
    
        %i_cmp <- %len <= %i
        br %i_cmp :loop1_exit                               // enter loop if %i < %len

        %offset <- %i + 1                                      // increase one for eight bytes at the beginning of allocate array which indicate the length of the array.
        %offset <- %offset * 8

        %addrload <- %arr + %offset                          
        %arr_val <- load %addrload

        %val_cmp <- %val = %arr_val
        br %val_cmp :found
        
        %i <- %i + 1

    br :loop1_begin
    :loop1_exit
    
    return -1

    :found
    return %i
      
}

define :main(){
    %arr <- call allocate(17, 0)

    // change position 4 to be 9
    %offset <- 5
    %offset <- %offset * 8
    %toAssign <- 9

    %addrStore <- %arr + %offset                          
    store %addrStore <- %toAssign   

    %fib <- call :linear_search(9, %arr)

    //expect 4
    %toPrint <- %fib << 1
    %toPrint <- %toPrint + 1
    call print(%toPrint)
    

    // change position 4 to be 11
    %offset <- 5
    %offset <- %offset * 8
    %toAssign <- 11

    %addrStore <- %arr + %offset                          
    store %addrStore <- %toAssign   

    %fib <- call :linear_search(9, %arr)

    //expect -1
    %toPrint <- %fib << 1
    %toPrint <- %toPrint +  1
    call print(%toPrint)
    
    return %toPrint
}