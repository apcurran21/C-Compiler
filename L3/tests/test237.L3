define @main () {
 
:NNNNNN
 br :entry
 
:entry
 %t <- call @createTuple (3)
 %v <- call @myF (%t, 4)
 %v <- call @encodeValue (%v)
 call print (%v)
 return 
}

define @createTuple (%p1) {
 
:NNNNNN
 br :entry
 
:entry
 %x2 <- 21
 %p <- call allocate (9, 1)
 %newVar1 <- 0 * 8
 %newVar0 <- %newVar1 + 8
 %newVar2 <- %p + %newVar0
 store %newVar2 <- 0
 %newVar4 <- 1 * 8
 %newVar3 <- %newVar4 + 8
 %newVar5 <- %p + %newVar3
 store %newVar5 <- 1
 %newVar7 <- 2 * 8
 %newVar6 <- %newVar7 + 8
 %newVar8 <- %p + %newVar6
 store %newVar8 <- %p1
 %newVar10 <- 3 * 8
 %newVar9 <- %newVar10 + 8
 %newVar11 <- %p + %newVar9
 store %newVar11 <- %x2
 return %p
}

define @myF (%c, %p1) {
 
:NNNNNN
 br :entry
 
:entry
 %newVar1 <- 2 * 8
 %newVar0 <- %newVar1 + 8
 %newVar2 <- %c + %newVar0
 %x1 <- load %newVar2
 %newVar4 <- 3 * 8
 %newVar3 <- %newVar4 + 8
 %newVar5 <- %c + %newVar3
 %x2 <- load %newVar5
 %encodedX1 <- call @encodeValue (%x1)
 call print (%encodedX1)
 %encodedX2 <- call @encodeValue (%x2)
 call print (%encodedX2)
 %encodedP1 <- call @encodeValue (%p1)
 call print (%encodedP1)
 %r1 <- %x1 + %x2
 %encodedR1 <- call @encodeValue (%r1)
 call print (%encodedR1)
 %r2 <- %r1 + %p1
 return %r2
}

define @encodeValue (%v) {
 
:NNNNNN
 br :entry
 
:entry
 %encodedV <- %v
 %encodedV <- %encodedV << 1
 %encodedV <- %encodedV + 1
 return %encodedV
}

