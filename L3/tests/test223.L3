define @main () {
 
:NNNNNN
 br :entry
 
:entry
 %newVar1 <- 5 >> 1
 %newVar0 <- %newVar1
 %newVar0 <- %newVar0 << 1
 %newVar0 <- %newVar0 + 1
 %newVar0 <- %newVar0 + 4
 %array <- call allocate (%newVar0, 1)
 %newVar2 <- %array + 8
 store %newVar2 <- 3
 %newVar3 <- %array + 16
 store %newVar3 <- 5
 %print1 <- call @findLen (%array)
 %print2 <- call @findSum (%array)
 call print (%print1)
 call print (%print2)
 return 
}

define @findSum (%array) {
 
:NNNNNNN
 br :entry1
 
:entry1
 %newVar1 <- 0
 %newVar2 <- 1
 %newVar1 <- %newVar1 + 0
 %newVar0 <- %newVar1 * 8
 %newVar0 <- %newVar0 + 24
 %newVar3 <- %array + %newVar0
 %ret <- load %newVar3
 %newVar5 <- 0
 %newVar6 <- 1
 %newVar5 <- %newVar5 + 1
 %newVar4 <- %newVar5 * 8
 %newVar4 <- %newVar4 + 24
 %newVar7 <- %array + %newVar4
 %temp <- load %newVar7
 %ret <- %ret + %temp
 %newVar9 <- 0
 %newVar10 <- 1
 %newVar9 <- %newVar9 + 2
 %newVar8 <- %newVar9 * 8
 %newVar8 <- %newVar8 + 24
 %newVar11 <- %array + %newVar8
 %temp <- load %newVar11
 %ret <- %ret + %temp
 %ret <- %ret << 1
 %ret <- %ret + 1
 return %ret
}

define @findLen (%array) {
 
:NNNNNNN
 br :entry2
 
:entry2
 %newVar0 <- 0 * 8
 %newVar1 <- %newVar0 + 16
 %newVar2 <- %array + %newVar1
 %ret <- load %newVar2
 %ret <- %ret << 1
 %ret <- %ret + 1
 return %ret
}

