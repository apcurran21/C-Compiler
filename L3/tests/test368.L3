//find and print all prime factors of a given number
//then print the number of occurance of the most frequent prime factor

define @main (){
	%v1 <- 64
	%v2 <- 72
	%v3 <- 27
	%v4 <- 54
	%v5 <- 37
	%v6 <- 53

	call @encode_print (%v1)
	call @print_primes (%v1)
	call @encode_print (%v2)
	call @print_primes (%v2)
	call @encode_print (%v3)
	call @print_primes (%v3)
	call @encode_print (%v4)
	call @print_primes (%v4)
	call @encode_print (%v5)
	call @print_primes (%v5)
	call @encode_print (%v6)
	call @print_primes (%v6)

	return 0
}

define @encode (%num_to_encode){
	%num_to_encode <- %num_to_encode << 1
	%num_to_encode <- %num_to_encode + 1
	return %num_to_encode
}

define @encode_print (%unencode_to_print){
	%unencode_to_print <- call @encode (%unencode_to_print)
	call print (%unencode_to_print)
	return
}

define @sqrt (%var){
	%i <- 0

	:start_label
	%i <- %i + 1
	%i2 <- %i * %i
	%sqrt_flag <- %i2 <= %var
	br %sqrt_flag :start_label
  br :ret_label
	
	:ret_label
	return %i
}

define @divisible (%dividend, %divisor){
	//ratio <- %dividend / %divisor

	//expect_dividend <- ratio * %divisor
	//div_flag <- expect_dividend = %dividend
	//br div_flag :div_true
  //br :div_false

	//:div_true
	//return 1

	//:div_false
	//return 0

	:div_loop_start
	%i <- %dividend < %divisor
	br %i :div_ret_no
  br :div_to_equal

	:div_ret_no
	return 0

	:div_to_equal
	%i <- %divisor = %dividend
	br %i :div_ret_true
  br :div_to_loop

	:div_ret_true
	return 1

	:div_to_loop
	%dividend <- %dividend - %divisor
	br :div_loop_start

	
}

define @greater (%foo, %bar){
	%flag <- %foo >= %bar
	br %flag :foogeqbar
  br :nfoogeqbar
	:nfoogeqbar
	return %bar
	:foogeqbar
	return %foo
}

define @customer_divide(%dividend, %divisor){
	%ret <- 0
	:cus_start
	%dividend <- %dividend - %divisor
	%ret <- %ret + 1
	%flg <- %dividend = 0
	br %flg :cus_ret
  br :cus_start

	:cus_ret
	return %ret

}

define @print_primes (%num){
	%d <- 2
	%g_freq <- 0
	%orig_num <- %num
	%most_freq <- 0
	%curr_freq <- 0
	%cnt_curr <- 0

	%num_sqrt <- call @sqrt (%num)

	:init

	%ini_ret <- %d > %orig_num
	br %ini_ret :ini_return
  br :ini_cont

	:ini_cont

	%divisible_flag <- call @divisible (%num,%d)
	br %divisible_flag :to_print
  br :not_to_print

	:to_print
	call @encode_print (%d)
	%new_num <- call @customer_divide(%num,%d)
	%num <- %new_num
	%curr_freq <- %curr_freq + 1
	br :init

	:not_to_print
	%d <- %d + 1
	%curr_most <- %curr_freq > %most_freq
	br %curr_most :update
  br :do_not_update
	:update
	%most_freq <- %curr_freq
	:do_not_update
	%curr_freq <- 0
	br :init

	:ini_return

	call @encode_print (%most_freq)

	return 0

}









