define @main() {
	%len <- 10

	%arr <- call @GetArray(%len)

	call print(%arr)


	%res <- call @FindPeak(%arr, %len)

	call @PrintResult(%res)

	return 
}

define @GetArray(%len) {
	%len <- %len << 1
	%len <- %len + 1

	%arr <- call allocate(%len, 1)

	%pos <- %arr + 8
	%x <- 1
	%x <- %x << 1
	%x <- %x + 1
	store %pos <- %x

	%pos <- %pos + 8
	%x <- 2
	%x <- %x << 1
	%x <- %x + 1
	store %pos <- %x

	%pos <- %pos + 8
	%x <- 3
	%x <- %x << 1
	%x <- %x + 1
	store %pos <- %x

	%pos <- %pos + 8
	%x <- 5
	%x <- %x << 1
	%x <- %x + 1
	store %pos <- %x

	%pos <- %pos + 8
	%x <- 1
	%x <- %x << 1
	%x <- %x + 1
	store %pos <- %x

	%pos <- %pos + 8
	%x <- 3
	%x <- %x << 1
	%x <- %x + 1
	store %pos <- %x

	%pos <- %pos + 8
	%x <- 2
	%x <- %x << 1
	%x <- %x + 1
	store %pos <- %x

	%pos <- %pos + 8
	%x <- 10
	%x <- %x << 1
	%x <- %x + 1
	store %pos <- %x

	%pos <- %pos + 8
	%x <- 11
	%x <- %x << 1
	%x <- %x + 1
	store %pos <- %x

	%pos <- %pos + 8
	%x <- 8
	%x <- %x << 1
	%x <- %x + 1
	store %pos <- %x

	return %arr
}


define @FindPeak(%arr, %len) {
	%max <- 0
	%ind <- 0

	%pos <- %arr + 8
	:LoopStart

	%loopEnded <- %ind >= %len
	br %loopEnded :LoopEnd


	%cur <- load %pos

	%notMax <- %max >= %cur
	br %notMax :continue

	%max <- %cur

	:continue

	%ind <- %ind + 1
	%pos <- %pos + 8

	br :LoopStart

	:LoopEnd
	return %max
}

define @PrintResult(%res) {
	call print(%res)
	return
}
