// randomize input variable with many operations

define @main () {
	
	//compute square of the distance between the following points
	%x1 <- 100
	%x2 <- 1
	%y1 <- 12
	%y2 <- 92

	%distSq <- call @findDist(%x1, %x2, %y1, %y2)

	// encode
	%distSq <- %distSq << 2
	%distSq <- %distSq + 1
	
	// print answer
	call print (%distSq)
	
	// decode
	%distSq <- %distSq - 1
	%distSq <- %distSq >> 2
	
	// randomize distance
	%ans <- call @randomize(%distSq)
	
	// encode
	%ans <- %ans << 2
	%ans <- %ans + 1
	
	// print answer
	call print (%ans)

	// decode
	%ans <- %ans - 1
	%ans <- %ans >> 2

	// check if random var is even
	%isEven <- call @myF (%ans)
	%isEven <- %isEven << 1 
	%isEven <- %isEven + 1
	call print (%isEven)
	return
}

define @myF(%x)
{
	%pos <- %x > 0
	br %pos :poVs
  br :neg
	:neg
	%x <- %x * -1
	:poVs
	%divBy2 <- %x & 1
	%e <- %divBy2 = 0
	br %e :even
  br :odd
	:even
	return 1
	:odd
	return 0
}

define @findDist(%x1, %x2, %y1, %y2) {
	%xDist <- %x2 - %x1
	%yDist <- %y2 - %y1
	%sqX <- %xDist*%xDist
	%sqY <- %yDist*%yDist
	%sqDist <- %sqX + %sqY
	return %sqDist 
}

// perform so many arithmetic operations, the new variable is nearly random
define @randomize(%x) {

	// perform many arithmetic operations
	%x <- %x + 5
	%x <- %x*2
	%x <- %x - 10
	%x <- %x >> 2

	// check if new value is greater than 10
	%greater10 <- %x > 10
	br %greater10 :g
  br :le

	// if greater than 10, multiply by 2 and print
	:g
	%x <- %x * 2
	%x <- %x << 2
	%x <- %x + 1
	call print (%x)
	%x <- %x - 1
	%x <- %x >> 2

	// return new value
	return %x

	// if less than 10, multiply by 3 and print
	:le
	%x <- %x *3
	%x <- %x << 2
	%x <- %x + 1
	call print (%x)
	%x <- %x - 1
	%x <- %x >> 2

	// return new value
	return %x
}
