define @main () {
 
:entry
 %newVar1 <- 7 >> 1
 %newVar0 <- %newVar1
 %newVar0 <- %newVar0 << 1
 %newVar0 <- %newVar0 + 1
 %newVar0 <- %newVar0 + 4
 %array <- call allocate (%newVar0, 1)
 %newVar2 <- %array + 8
 store %newVar2 <- 3
 %newVar3 <- %array + 16
 store %newVar3 <- 7
 %newVar4 <- 0 * 8
 %newVar5 <- %newVar4 + 16
 %newVar6 <- %array + %newVar5
 %ret <- load %newVar6
 %ret <- call @rand (%array, %ret)
 %ret <- %ret << 1
 %ret <- %ret + 1
 call print (%ret)
 %newVar8 <- 9 >> 1
 %newVar7 <- %newVar8
 %newVar7 <- %newVar7 << 1
 %newVar7 <- %newVar7 + 1
 %newVar7 <- %newVar7 + 4
 %array <- call allocate (%newVar7, 1)
 %newVar9 <- %array + 8
 store %newVar9 <- 3
 %newVar10 <- %array + 16
 store %newVar10 <- 9
 %newVar11 <- 0 * 8
 %newVar12 <- %newVar11 + 16
 %newVar13 <- %array + %newVar12
 %ret <- load %newVar13
 %ret <- call @rand (%array, %ret)
 %ret <- %ret << 1
 %ret <- %ret + 1
 call print (%ret)
 return 
}

define @rand (%array, %ret) {
 
:entry1
 br :startCalcs
 
:startCalcs
 %ans <- 0
 %len <- 0
 %test <- 0
 br :keepGoing
 
:keepGoing
 %newVar0 <- 0 * 8
 %newVar1 <- %newVar0 + 16
 %newVar2 <- %array + %newVar1
 %len <- load %newVar2
 %test <- %len = %ret
 br :good
 
:cantreach
 %ans <- 1
 %test <- 0
 return 
 
:good
 %newVar4 <- 0
 %newVar5 <- 1
 %newVar4 <- %newVar4 + 0
 %newVar3 <- %newVar4 * 8
 %newVar3 <- %newVar3 + 24
 %newVar6 <- %array + %newVar3
 %ans <- load %newVar6
 %newVar8 <- 0
 %newVar9 <- 1
 %newVar8 <- %newVar8 + 1
 %newVar7 <- %newVar8 * 8
 %newVar7 <- %newVar7 + 24
 %newVar10 <- %array + %newVar7
 %test <- load %newVar10
 %newVar12 <- 0
 %newVar13 <- 1
 %newVar12 <- %newVar12 + 2
 %newVar11 <- %newVar12 * 8
 %newVar11 <- %newVar11 + 24
 %newVar14 <- %array + %newVar11
 %len <- load %newVar14
 %ans <- %ans + %test
 %ans <- %ans + %len
 return %ans
}

