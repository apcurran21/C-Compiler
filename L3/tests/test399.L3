// computes fibonacci sequences of differing lengths and var6s them
define @main (){ 
    call @fib (0)

    call @fib (1)

    call @fib (15)

    call @fib (40)

    return
}
define @next (%v1, %v2){ 
    %ret <- %v1 + %v2
    return %ret
}
// fib(n) where n = sequence length
define @fib (%v1){ 

    %var1 <- %v1
    %var2 <- 0
    %var3 <- 0
    %var4 <- 1
    :loop
    %var6 <- %var1
    %var5 <- %var2
    %test <- %var6 = %var5 
    br %test :end

    %var6 <- %var3
    %var6 <- %var6 << 1
    %var6 <- %var6 + 1
    call print (%var6)

    %var6 <- %var3
    %var5 <- %var4
    %ret <- call @next (%var6, %var5)

    %var6 <- %var4
    %var3 <- %var6
    %var4 <- %ret

    %var6 <- %var2
    %var6 <- %var6 + 1
    %var2 <- %var6
    br :loop

    :end
    return
}

