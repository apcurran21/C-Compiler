define @mod (%x, %y) {
 
:entry
 %r <- %x = 0
 br %r :mgood 
 br :misneg
 
:misneg
 %r <- %x > -1
 br %r :mloop 
 br :ret_early
 
:ret_early
 return 0
 
:mloop
 %x <- %x - %y
 %r <- %x = 0
 br %r :mgood 
 br :misneg
 
:mgood
 return 1
}

define @prime (%arg) {
 
:entry
 %inputIs2 <- %arg = 2
 %counter <- 1
 br %inputIs2 :is_prime 
 br :prime_loop
 
:prime_loop
 %halfarg <- %arg >> 1
 %counter <- %counter + 1
 %pstatus <- call @mod (%arg, %counter)
 br %pstatus :not_prime 
 br :maybe_prime
 
:maybe_prime
 %reloop <- %counter <= %halfarg
 br %reloop :prime_loop 
 br :is_prime
 
:is_prime
 return 1
 
:not_prime
 return 0
}

define @gpf (%arg) {
 
:entry
 %argIsPrime <- call @prime (%arg)
 %argNotPrime <- %argIsPrime = 0
 br %argNotPrime :not_itself 
 br :itself
 
:itself
 return %arg
 
:not_itself
 %possiblePrime <- %arg >> 1
 %possiblePrime <- %possiblePrime + 1
 br :gpf_loop
 
:gpf_loop
 %sad <- %possiblePrime < 2
 br %sad :gpf_done_sad 
 br :not_sad
 
:not_sad
 %possiblePrime <- %possiblePrime - 1
 %modulo <- call @mod (%arg, %possiblePrime)
 %notFactor <- %modulo = 0
 br %notFactor :gpf_loop 
 br :nloop
 
:nloop
 %cndIsPrime <- call @prime (%possiblePrime)
 %notPrime <- %cndIsPrime = 0
 br %notPrime :gpf_loop 
 br :done
 
:done
 return %possiblePrime
 
:gpf_done_sad
 return -1
}

define @main () {
 
:entry
 %result <- call @gpf (33030)
 %result <- %result << 1
 %result <- %result + 1
 call print (%result)
 return 
}

